{"ast":null,"code":"/**\r\n * DevExtreme (localization/ldml/date.parser.js)\r\n * Version: 19.2.6\r\n * Build date: Thu Jan 30 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar escapeRegExp = require(\"../../core/utils/common\").escapeRegExp;\n\nvar FORMAT_TYPES = {\n  3: \"abbreviated\",\n  4: \"wide\",\n  5: \"narrow\"\n};\n\nvar monthRegExpGenerator = function (count, dateParts) {\n  if (count > 2) {\n    return Object.keys(FORMAT_TYPES).map(function (count) {\n      return [\"format\", \"standalone\"].map(function (type) {\n        return dateParts.getMonthNames(FORMAT_TYPES[count], type).join(\"|\");\n      }).join(\"|\");\n    }).join(\"|\");\n  }\n\n  return \"0?[1-9]|1[012]\";\n};\n\nvar PATTERN_REGEXPS = {\n  y: function (count) {\n    return \"[0-9]+\";\n  },\n  M: monthRegExpGenerator,\n  L: monthRegExpGenerator,\n  Q: function (count, dateParts) {\n    if (count > 2) {\n      return dateParts.getQuarterNames(FORMAT_TYPES[count], \"format\").join(\"|\");\n    }\n\n    return \"0?[1-4]\";\n  },\n  E: function (count, dateParts) {\n    return \"\\\\D*\";\n  },\n  a: function (count, dateParts) {\n    return dateParts.getPeriodNames(FORMAT_TYPES[count < 3 ? 3 : count], \"format\").join(\"|\");\n  },\n  d: function (count) {\n    return \"0?[1-9]|[12][0-9]|3[01]\";\n  },\n  H: function (count) {\n    return \"0?[0-9]|1[0-9]|2[0-3]\";\n  },\n  h: function (count) {\n    return \"0?[1-9]|1[012]\";\n  },\n  m: function (count) {\n    return \"0?[0-9]|[1-5][0-9]\";\n  },\n  s: function (count) {\n    return \"0?[0-9]|[1-5][0-9]\";\n  },\n  S: function (count) {\n    return \"[0-9]{1,\" + count + \"}\";\n  }\n};\nvar parseNumber = Number;\n\nvar caseInsensitiveIndexOf = function (array, value) {\n  return array.map(function (item) {\n    return item.toLowerCase();\n  }).indexOf(value.toLowerCase());\n};\n\nvar monthPatternParser = function (text, count, dateParts) {\n  if (count > 2) {\n    return [\"format\", \"standalone\"].map(function (type) {\n      return Object.keys(FORMAT_TYPES).map(function (count) {\n        var monthNames = dateParts.getMonthNames(FORMAT_TYPES[count], type);\n        return caseInsensitiveIndexOf(monthNames, text);\n      });\n    }).reduce(function (a, b) {\n      return a.concat(b);\n    }).filter(function (index) {\n      return index >= 0;\n    })[0];\n  }\n\n  return parseNumber(text) - 1;\n};\n\nvar PATTERN_PARSERS = {\n  y: function (text, count) {\n    var year = parseNumber(text);\n\n    if (2 === count) {\n      return year < 30 ? 2e3 + year : 1900 + year;\n    }\n\n    return year;\n  },\n  M: monthPatternParser,\n  L: monthPatternParser,\n  Q: function (text, count, dateParts) {\n    if (count > 2) {\n      return dateParts.getQuarterNames(FORMAT_TYPES[count], \"format\").indexOf(text);\n    }\n\n    return parseNumber(text) - 1;\n  },\n  E: function (text, count, dateParts) {\n    var dayNames = dateParts.getDayNames(FORMAT_TYPES[count < 3 ? 3 : count], \"format\");\n    return caseInsensitiveIndexOf(dayNames, text);\n  },\n  a: function (text, count, dateParts) {\n    var periodNames = dateParts.getPeriodNames(FORMAT_TYPES[count < 3 ? 3 : count], \"format\");\n    return caseInsensitiveIndexOf(periodNames, text);\n  },\n  d: parseNumber,\n  H: parseNumber,\n  h: parseNumber,\n  m: parseNumber,\n  s: parseNumber,\n  S: function (text, count) {\n    count = Math.max(count, 3);\n    text = text.slice(0, 3);\n\n    while (count < 3) {\n      text += \"0\";\n      count++;\n    }\n\n    return parseNumber(text);\n  }\n};\nvar ORDERED_PATTERNS = [\"y\", \"M\", \"d\", \"h\", \"m\", \"s\", \"S\"];\nvar PATTERN_SETTERS = {\n  y: \"setFullYear\",\n  M: \"setMonth\",\n  L: \"setMonth\",\n  a: function (date, value) {\n    var hours = date.getHours();\n\n    if (!value && 12 === hours) {\n      date.setHours(0);\n    } else {\n      if (value && 12 !== hours) {\n        date.setHours(hours + 12);\n      }\n    }\n  },\n  d: \"setDate\",\n  H: \"setHours\",\n  h: \"setHours\",\n  m: \"setMinutes\",\n  s: \"setSeconds\",\n  S: \"setMilliseconds\"\n};\n\nvar getSameCharCount = function (text, index) {\n  var char = text[index];\n  var count = 0;\n\n  do {\n    index++;\n    count++;\n  } while (text[index] === char);\n\n  return count;\n};\n\nvar createPattern = function (char, count) {\n  var result = \"\";\n\n  for (var i = 0; i < count; i++) {\n    result += char;\n  }\n\n  return result;\n};\n\nvar getRegExpInfo = function (format, dateParts) {\n  var regexpText = \"\";\n  var stubText = \"\";\n  var isEscaping;\n  var patterns = [];\n\n  var addPreviousStub = function () {\n    if (stubText) {\n      patterns.push(\"'\" + stubText + \"'\");\n      regexpText += escapeRegExp(stubText) + \")\";\n      stubText = \"\";\n    }\n  };\n\n  for (var i = 0; i < format.length; i++) {\n    var char = format[i];\n    var isEscapeChar = \"'\" === char;\n    var regexpPart = PATTERN_REGEXPS[char];\n\n    if (isEscapeChar) {\n      isEscaping = !isEscaping;\n\n      if (\"'\" !== format[i - 1]) {\n        continue;\n      }\n    }\n\n    if (regexpPart && !isEscaping) {\n      var count = getSameCharCount(format, i);\n      var pattern = createPattern(char, count);\n      addPreviousStub();\n      patterns.push(pattern);\n      regexpText += \"(\" + regexpPart(count, dateParts) + \")\";\n      i += count - 1;\n    } else {\n      if (!stubText) {\n        regexpText += \"(\";\n      }\n\n      stubText += char;\n    }\n  }\n\n  addPreviousStub();\n  return {\n    patterns: patterns,\n    regexp: new RegExp(\"^\" + regexpText + \"$\", \"i\")\n  };\n};\n\nvar getPatternSetters = function () {\n  return PATTERN_SETTERS;\n};\n\nvar setPatternPart = function (date, pattern, text, dateParts) {\n  var patternChar = pattern[0];\n  var partSetter = PATTERN_SETTERS[patternChar];\n  var partParser = PATTERN_PARSERS[patternChar];\n\n  if (partSetter && partParser) {\n    var value = partParser(text, pattern.length, dateParts);\n\n    if (date[partSetter]) {\n      date[partSetter](value);\n    } else {\n      partSetter(date, value);\n    }\n  }\n};\n\nvar setPatternPartFromNow = function (date, pattern, now) {\n  var setterName = PATTERN_SETTERS[pattern];\n  var getterName = \"g\" + setterName.substr(1);\n  date[setterName](now[getterName]());\n};\n\nvar getShortPatterns = function (fullPatterns) {\n  return fullPatterns.map(function (pattern) {\n    if (\"'\" === pattern[0]) {\n      return \"\";\n    } else {\n      return \"H\" === pattern[0] ? \"h\" : pattern[0];\n    }\n  });\n};\n\nvar getMaxOrderedPatternIndex = function (patterns) {\n  var indexes = patterns.map(function (pattern) {\n    return ORDERED_PATTERNS.indexOf(pattern);\n  });\n  return Math.max.apply(Math, indexes);\n};\n\nvar getOrderedFormatPatterns = function (formatPatterns) {\n  var otherPatterns = formatPatterns.filter(function (pattern) {\n    return ORDERED_PATTERNS.indexOf(pattern) < 0;\n  });\n  return ORDERED_PATTERNS.concat(otherPatterns);\n};\n\nvar getParser = function (format, dateParts) {\n  var regExpInfo = getRegExpInfo(format, dateParts);\n  return function (text) {\n    var regExpResult = regExpInfo.regexp.exec(text);\n\n    if (regExpResult) {\n      var now = new Date();\n      var date = new Date(now.getFullYear(), 0, 1);\n      var formatPatterns = getShortPatterns(regExpInfo.patterns);\n      var maxPatternIndex = getMaxOrderedPatternIndex(formatPatterns);\n      var orderedFormatPatterns = getOrderedFormatPatterns(formatPatterns);\n      orderedFormatPatterns.forEach(function (pattern, index) {\n        if (!pattern || index < ORDERED_PATTERNS.length && index > maxPatternIndex) {\n          return;\n        }\n\n        var patternIndex = formatPatterns.indexOf(pattern);\n\n        if (patternIndex >= 0) {\n          setPatternPart(date, regExpInfo.patterns[patternIndex], regExpResult[patternIndex + 1], dateParts);\n        } else {\n          setPatternPartFromNow(date, pattern, now);\n        }\n      });\n      return date;\n    }\n\n    return null;\n  };\n};\n\nexports.getParser = getParser;\nexports.getRegExpInfo = getRegExpInfo;\nexports.getPatternSetters = getPatternSetters;","map":{"version":3,"sources":["C:/Users/Swizzle/Desktop/SE Project/Application/csh/node_modules/devextreme/localization/ldml/date.parser.js"],"names":["escapeRegExp","require","FORMAT_TYPES","monthRegExpGenerator","count","dateParts","Object","keys","map","type","getMonthNames","join","PATTERN_REGEXPS","y","M","L","Q","getQuarterNames","E","a","getPeriodNames","d","H","h","m","s","S","parseNumber","Number","caseInsensitiveIndexOf","array","value","item","toLowerCase","indexOf","monthPatternParser","text","monthNames","reduce","b","concat","filter","index","PATTERN_PARSERS","year","dayNames","getDayNames","periodNames","Math","max","slice","ORDERED_PATTERNS","PATTERN_SETTERS","date","hours","getHours","setHours","getSameCharCount","char","createPattern","result","i","getRegExpInfo","format","regexpText","stubText","isEscaping","patterns","addPreviousStub","push","length","isEscapeChar","regexpPart","pattern","regexp","RegExp","getPatternSetters","setPatternPart","patternChar","partSetter","partParser","setPatternPartFromNow","now","setterName","getterName","substr","getShortPatterns","fullPatterns","getMaxOrderedPatternIndex","indexes","apply","getOrderedFormatPatterns","formatPatterns","otherPatterns","getParser","regExpInfo","regExpResult","exec","Date","getFullYear","maxPatternIndex","orderedFormatPatterns","forEach","patternIndex","exports"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (localization/ldml/date.parser.js)\r\n * Version: 19.2.6\r\n * Build date: Thu Jan 30 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar escapeRegExp = require(\"../../core/utils/common\").escapeRegExp;\r\nvar FORMAT_TYPES = {\r\n    3: \"abbreviated\",\r\n    4: \"wide\",\r\n    5: \"narrow\"\r\n};\r\nvar monthRegExpGenerator = function(count, dateParts) {\r\n    if (count > 2) {\r\n        return Object.keys(FORMAT_TYPES).map(function(count) {\r\n            return [\"format\", \"standalone\"].map(function(type) {\r\n                return dateParts.getMonthNames(FORMAT_TYPES[count], type).join(\"|\")\r\n            }).join(\"|\")\r\n        }).join(\"|\")\r\n    }\r\n    return \"0?[1-9]|1[012]\"\r\n};\r\nvar PATTERN_REGEXPS = {\r\n    y: function(count) {\r\n        return \"[0-9]+\"\r\n    },\r\n    M: monthRegExpGenerator,\r\n    L: monthRegExpGenerator,\r\n    Q: function(count, dateParts) {\r\n        if (count > 2) {\r\n            return dateParts.getQuarterNames(FORMAT_TYPES[count], \"format\").join(\"|\")\r\n        }\r\n        return \"0?[1-4]\"\r\n    },\r\n    E: function(count, dateParts) {\r\n        return \"\\\\D*\"\r\n    },\r\n    a: function(count, dateParts) {\r\n        return dateParts.getPeriodNames(FORMAT_TYPES[count < 3 ? 3 : count], \"format\").join(\"|\")\r\n    },\r\n    d: function(count) {\r\n        return \"0?[1-9]|[12][0-9]|3[01]\"\r\n    },\r\n    H: function(count) {\r\n        return \"0?[0-9]|1[0-9]|2[0-3]\"\r\n    },\r\n    h: function(count) {\r\n        return \"0?[1-9]|1[012]\"\r\n    },\r\n    m: function(count) {\r\n        return \"0?[0-9]|[1-5][0-9]\"\r\n    },\r\n    s: function(count) {\r\n        return \"0?[0-9]|[1-5][0-9]\"\r\n    },\r\n    S: function(count) {\r\n        return \"[0-9]{1,\" + count + \"}\"\r\n    }\r\n};\r\nvar parseNumber = Number;\r\nvar caseInsensitiveIndexOf = function(array, value) {\r\n    return array.map(function(item) {\r\n        return item.toLowerCase()\r\n    }).indexOf(value.toLowerCase())\r\n};\r\nvar monthPatternParser = function(text, count, dateParts) {\r\n    if (count > 2) {\r\n        return [\"format\", \"standalone\"].map(function(type) {\r\n            return Object.keys(FORMAT_TYPES).map(function(count) {\r\n                var monthNames = dateParts.getMonthNames(FORMAT_TYPES[count], type);\r\n                return caseInsensitiveIndexOf(monthNames, text)\r\n            })\r\n        }).reduce(function(a, b) {\r\n            return a.concat(b)\r\n        }).filter(function(index) {\r\n            return index >= 0\r\n        })[0]\r\n    }\r\n    return parseNumber(text) - 1\r\n};\r\nvar PATTERN_PARSERS = {\r\n    y: function(text, count) {\r\n        var year = parseNumber(text);\r\n        if (2 === count) {\r\n            return year < 30 ? 2e3 + year : 1900 + year\r\n        }\r\n        return year\r\n    },\r\n    M: monthPatternParser,\r\n    L: monthPatternParser,\r\n    Q: function(text, count, dateParts) {\r\n        if (count > 2) {\r\n            return dateParts.getQuarterNames(FORMAT_TYPES[count], \"format\").indexOf(text)\r\n        }\r\n        return parseNumber(text) - 1\r\n    },\r\n    E: function(text, count, dateParts) {\r\n        var dayNames = dateParts.getDayNames(FORMAT_TYPES[count < 3 ? 3 : count], \"format\");\r\n        return caseInsensitiveIndexOf(dayNames, text)\r\n    },\r\n    a: function(text, count, dateParts) {\r\n        var periodNames = dateParts.getPeriodNames(FORMAT_TYPES[count < 3 ? 3 : count], \"format\");\r\n        return caseInsensitiveIndexOf(periodNames, text)\r\n    },\r\n    d: parseNumber,\r\n    H: parseNumber,\r\n    h: parseNumber,\r\n    m: parseNumber,\r\n    s: parseNumber,\r\n    S: function(text, count) {\r\n        count = Math.max(count, 3);\r\n        text = text.slice(0, 3);\r\n        while (count < 3) {\r\n            text += \"0\";\r\n            count++\r\n        }\r\n        return parseNumber(text)\r\n    }\r\n};\r\nvar ORDERED_PATTERNS = [\"y\", \"M\", \"d\", \"h\", \"m\", \"s\", \"S\"];\r\nvar PATTERN_SETTERS = {\r\n    y: \"setFullYear\",\r\n    M: \"setMonth\",\r\n    L: \"setMonth\",\r\n    a: function(date, value) {\r\n        var hours = date.getHours();\r\n        if (!value && 12 === hours) {\r\n            date.setHours(0)\r\n        } else {\r\n            if (value && 12 !== hours) {\r\n                date.setHours(hours + 12)\r\n            }\r\n        }\r\n    },\r\n    d: \"setDate\",\r\n    H: \"setHours\",\r\n    h: \"setHours\",\r\n    m: \"setMinutes\",\r\n    s: \"setSeconds\",\r\n    S: \"setMilliseconds\"\r\n};\r\nvar getSameCharCount = function(text, index) {\r\n    var char = text[index];\r\n    var count = 0;\r\n    do {\r\n        index++;\r\n        count++\r\n    } while (text[index] === char);\r\n    return count\r\n};\r\nvar createPattern = function(char, count) {\r\n    var result = \"\";\r\n    for (var i = 0; i < count; i++) {\r\n        result += char\r\n    }\r\n    return result\r\n};\r\nvar getRegExpInfo = function(format, dateParts) {\r\n    var regexpText = \"\";\r\n    var stubText = \"\";\r\n    var isEscaping;\r\n    var patterns = [];\r\n    var addPreviousStub = function() {\r\n        if (stubText) {\r\n            patterns.push(\"'\" + stubText + \"'\");\r\n            regexpText += escapeRegExp(stubText) + \")\";\r\n            stubText = \"\"\r\n        }\r\n    };\r\n    for (var i = 0; i < format.length; i++) {\r\n        var char = format[i];\r\n        var isEscapeChar = \"'\" === char;\r\n        var regexpPart = PATTERN_REGEXPS[char];\r\n        if (isEscapeChar) {\r\n            isEscaping = !isEscaping;\r\n            if (\"'\" !== format[i - 1]) {\r\n                continue\r\n            }\r\n        }\r\n        if (regexpPart && !isEscaping) {\r\n            var count = getSameCharCount(format, i);\r\n            var pattern = createPattern(char, count);\r\n            addPreviousStub();\r\n            patterns.push(pattern);\r\n            regexpText += \"(\" + regexpPart(count, dateParts) + \")\";\r\n            i += count - 1\r\n        } else {\r\n            if (!stubText) {\r\n                regexpText += \"(\"\r\n            }\r\n            stubText += char\r\n        }\r\n    }\r\n    addPreviousStub();\r\n    return {\r\n        patterns: patterns,\r\n        regexp: new RegExp(\"^\" + regexpText + \"$\", \"i\")\r\n    }\r\n};\r\nvar getPatternSetters = function() {\r\n    return PATTERN_SETTERS\r\n};\r\nvar setPatternPart = function(date, pattern, text, dateParts) {\r\n    var patternChar = pattern[0];\r\n    var partSetter = PATTERN_SETTERS[patternChar];\r\n    var partParser = PATTERN_PARSERS[patternChar];\r\n    if (partSetter && partParser) {\r\n        var value = partParser(text, pattern.length, dateParts);\r\n        if (date[partSetter]) {\r\n            date[partSetter](value)\r\n        } else {\r\n            partSetter(date, value)\r\n        }\r\n    }\r\n};\r\nvar setPatternPartFromNow = function(date, pattern, now) {\r\n    var setterName = PATTERN_SETTERS[pattern];\r\n    var getterName = \"g\" + setterName.substr(1);\r\n    date[setterName](now[getterName]())\r\n};\r\nvar getShortPatterns = function(fullPatterns) {\r\n    return fullPatterns.map(function(pattern) {\r\n        if (\"'\" === pattern[0]) {\r\n            return \"\"\r\n        } else {\r\n            return \"H\" === pattern[0] ? \"h\" : pattern[0]\r\n        }\r\n    })\r\n};\r\nvar getMaxOrderedPatternIndex = function(patterns) {\r\n    var indexes = patterns.map(function(pattern) {\r\n        return ORDERED_PATTERNS.indexOf(pattern)\r\n    });\r\n    return Math.max.apply(Math, indexes)\r\n};\r\nvar getOrderedFormatPatterns = function(formatPatterns) {\r\n    var otherPatterns = formatPatterns.filter(function(pattern) {\r\n        return ORDERED_PATTERNS.indexOf(pattern) < 0\r\n    });\r\n    return ORDERED_PATTERNS.concat(otherPatterns)\r\n};\r\nvar getParser = function(format, dateParts) {\r\n    var regExpInfo = getRegExpInfo(format, dateParts);\r\n    return function(text) {\r\n        var regExpResult = regExpInfo.regexp.exec(text);\r\n        if (regExpResult) {\r\n            var now = new Date;\r\n            var date = new Date(now.getFullYear(), 0, 1);\r\n            var formatPatterns = getShortPatterns(regExpInfo.patterns);\r\n            var maxPatternIndex = getMaxOrderedPatternIndex(formatPatterns);\r\n            var orderedFormatPatterns = getOrderedFormatPatterns(formatPatterns);\r\n            orderedFormatPatterns.forEach(function(pattern, index) {\r\n                if (!pattern || index < ORDERED_PATTERNS.length && index > maxPatternIndex) {\r\n                    return\r\n                }\r\n                var patternIndex = formatPatterns.indexOf(pattern);\r\n                if (patternIndex >= 0) {\r\n                    setPatternPart(date, regExpInfo.patterns[patternIndex], regExpResult[patternIndex + 1], dateParts)\r\n                } else {\r\n                    setPatternPartFromNow(date, pattern, now)\r\n                }\r\n            });\r\n            return date\r\n        }\r\n        return null\r\n    }\r\n};\r\nexports.getParser = getParser;\r\nexports.getRegExpInfo = getRegExpInfo;\r\nexports.getPatternSetters = getPatternSetters;\r\n"]},"metadata":{},"sourceType":"script"}