{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2018 Google LLC\n *\n * Distributed under MIT license.\n * See file LICENSE for detail or copy at https://opensource.org/licenses/MIT\n */\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst gaxios_1 = require(\"gaxios\");\n\nconst jsonBigint = require('json-bigint');\n\nexports.HOST_ADDRESS = 'http://metadata.google.internal.';\nexports.BASE_PATH = '/computeMetadata/v1';\nexports.BASE_URL = exports.HOST_ADDRESS + exports.BASE_PATH;\nexports.HEADER_NAME = 'Metadata-Flavor';\nexports.HEADER_VALUE = 'Google';\nexports.HEADERS = Object.freeze({\n  [exports.HEADER_NAME]: exports.HEADER_VALUE\n}); // Accepts an options object passed from the user to the API. In previous\n// versions of the API, it referred to a `Request` or an `Axios` request\n// options object.  Now it refers to an object with very limited property\n// names. This is here to help ensure users don't pass invalid options when\n// they  upgrade from 0.4 to 0.5 to 0.8.\n\nfunction validate(options) {\n  Object.keys(options).forEach(key => {\n    switch (key) {\n      case 'params':\n      case 'property':\n      case 'headers':\n        break;\n\n      case 'qs':\n        throw new Error(`'qs' is not a valid configuration option. Please use 'params' instead.`);\n\n      default:\n        throw new Error(`'${key}' is not a valid configuration option.`);\n    }\n  });\n}\n\nfunction metadataAccessor(type, options, noResponseRetries = 3) {\n  return __awaiter(this, void 0, void 0, function* () {\n    options = options || {};\n\n    if (typeof options === 'string') {\n      options = {\n        property: options\n      };\n    }\n\n    let property = '';\n\n    if (typeof options === 'object' && options.property) {\n      property = '/' + options.property;\n    }\n\n    validate(options);\n\n    try {\n      const res = yield gaxios_1.request({\n        url: `${exports.BASE_URL}/${type}${property}`,\n        headers: Object.assign({}, exports.HEADERS, options.headers),\n        retryConfig: {\n          noResponseRetries\n        },\n        params: options.params,\n        responseType: 'text'\n      }); // NOTE: node.js converts all incoming headers to lower case.\n\n      if (res.headers[exports.HEADER_NAME.toLowerCase()] !== exports.HEADER_VALUE) {\n        throw new Error(`Invalid response from metadata service: incorrect ${exports.HEADER_NAME} header.`);\n      } else if (!res.data) {\n        throw new Error('Invalid response from the metadata service');\n      }\n\n      if (typeof res.data === 'string') {\n        try {\n          return jsonBigint.parse(res.data);\n        } catch (_a) {\n          /* ignore */\n        }\n      }\n\n      return res.data;\n    } catch (e) {\n      if (e.response && e.response.status !== 200) {\n        e.message = `Unsuccessful response status code. ${e.message}`;\n      }\n\n      throw e;\n    }\n  });\n} // tslint:disable-next-line no-any\n\n\nfunction instance(options) {\n  return metadataAccessor('instance', options);\n}\n\nexports.instance = instance; // tslint:disable-next-line no-any\n\nfunction project(options) {\n  return metadataAccessor('project', options);\n}\n\nexports.project = project;\n/**\n * Determine if the metadata server is currently available.\n */\n\nfunction isAvailable() {\n  return __awaiter(this, void 0, void 0, function* () {\n    try {\n      // Attempt to read instance metadata. As configured, this will\n      // retry 3 times if there is a valid response, and fail fast\n      // if there is an ETIMEDOUT or ENOTFOUND error.\n      yield metadataAccessor('instance', undefined, 0);\n      return true;\n    } catch (err) {\n      // Failure to resolve the metadata service means that it is not available.\n      if (err.code && (err.code === 'ENOTFOUND' || err.code === 'ENOENT')) {\n        return false;\n      } // Throw unexpected errors.\n\n\n      throw err;\n    }\n  });\n}\n\nexports.isAvailable = isAvailable;","map":{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * Copyright 2018 Google LLC\n *\n * Distributed under MIT license.\n * See file LICENSE for detail or copy at https://opensource.org/licenses/MIT\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst gaxios_1 = require(\"gaxios\");\nconst jsonBigint = require('json-bigint');\nexports.HOST_ADDRESS = 'http://metadata.google.internal.';\nexports.BASE_PATH = '/computeMetadata/v1';\nexports.BASE_URL = exports.HOST_ADDRESS + exports.BASE_PATH;\nexports.HEADER_NAME = 'Metadata-Flavor';\nexports.HEADER_VALUE = 'Google';\nexports.HEADERS = Object.freeze({ [exports.HEADER_NAME]: exports.HEADER_VALUE });\n// Accepts an options object passed from the user to the API. In previous\n// versions of the API, it referred to a `Request` or an `Axios` request\n// options object.  Now it refers to an object with very limited property\n// names. This is here to help ensure users don't pass invalid options when\n// they  upgrade from 0.4 to 0.5 to 0.8.\nfunction validate(options) {\n    Object.keys(options).forEach(key => {\n        switch (key) {\n            case 'params':\n            case 'property':\n            case 'headers':\n                break;\n            case 'qs':\n                throw new Error(`'qs' is not a valid configuration option. Please use 'params' instead.`);\n            default:\n                throw new Error(`'${key}' is not a valid configuration option.`);\n        }\n    });\n}\nfunction metadataAccessor(type, options, noResponseRetries = 3) {\n    return __awaiter(this, void 0, void 0, function* () {\n        options = options || {};\n        if (typeof options === 'string') {\n            options = { property: options };\n        }\n        let property = '';\n        if (typeof options === 'object' && options.property) {\n            property = '/' + options.property;\n        }\n        validate(options);\n        try {\n            const res = yield gaxios_1.request({\n                url: `${exports.BASE_URL}/${type}${property}`,\n                headers: Object.assign({}, exports.HEADERS, options.headers),\n                retryConfig: { noResponseRetries },\n                params: options.params,\n                responseType: 'text'\n            });\n            // NOTE: node.js converts all incoming headers to lower case.\n            if (res.headers[exports.HEADER_NAME.toLowerCase()] !== exports.HEADER_VALUE) {\n                throw new Error(`Invalid response from metadata service: incorrect ${exports.HEADER_NAME} header.`);\n            }\n            else if (!res.data) {\n                throw new Error('Invalid response from the metadata service');\n            }\n            if (typeof res.data === 'string') {\n                try {\n                    return jsonBigint.parse(res.data);\n                }\n                catch (_a) {\n                    /* ignore */\n                }\n            }\n            return res.data;\n        }\n        catch (e) {\n            if (e.response && e.response.status !== 200) {\n                e.message = `Unsuccessful response status code. ${e.message}`;\n            }\n            throw e;\n        }\n    });\n}\n// tslint:disable-next-line no-any\nfunction instance(options) {\n    return metadataAccessor('instance', options);\n}\nexports.instance = instance;\n// tslint:disable-next-line no-any\nfunction project(options) {\n    return metadataAccessor('project', options);\n}\nexports.project = project;\n/**\n * Determine if the metadata server is currently available.\n */\nfunction isAvailable() {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            // Attempt to read instance metadata. As configured, this will\n            // retry 3 times if there is a valid response, and fail fast\n            // if there is an ETIMEDOUT or ENOTFOUND error.\n            yield metadataAccessor('instance', undefined, 0);\n            return true;\n        }\n        catch (err) {\n            // Failure to resolve the metadata service means that it is not available.\n            if (err.code && (err.code === 'ENOTFOUND' || err.code === 'ENOENT')) {\n                return false;\n            }\n            // Throw unexpected errors.\n            throw err;\n        }\n    });\n}\nexports.isAvailable = isAvailable;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}