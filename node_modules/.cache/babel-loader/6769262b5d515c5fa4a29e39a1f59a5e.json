{"ast":null,"code":"/**\r\n * DevExtreme (ui/scheduler/utils.recurrence.js)\r\n * Version: 19.2.6\r\n * Build date: Thu Jan 30 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar errors = require(\"../../core/errors\");\n\nvar extend = require(\"../../core/utils/extend\").extend;\n\nvar each = require(\"../../core/utils/iterator\").each;\n\nvar inArray = require(\"../../core/utils/array\").inArray;\n\nvar isDefined = require(\"../../core/utils/type\").isDefined;\n\nvar dateUtils = require(\"../../core/utils/date\");\n\nvar toMs = dateUtils.dateToMilliseconds;\nvar leastDaysInWeek = 4;\nvar intervalMap = {\n  secondly: \"seconds\",\n  minutely: \"minutes\",\n  hourly: \"hours\",\n  daily: \"days\",\n  weekly: \"weeks\",\n  monthly: \"months\",\n  yearly: \"years\"\n};\nvar dateSetterMap = {\n  bysecond: function (date, value) {\n    date.setSeconds(value);\n  },\n  byminute: function (date, value) {\n    date.setMinutes(value);\n  },\n  byhour: function (date, value) {\n    date.setHours(value);\n  },\n  bymonth: function (date, value) {\n    date.setMonth(value);\n  },\n  bymonthday: function (date, value) {\n    if (value < 0) {\n      var initialDate = new Date(date);\n      setDateByNegativeValue(initialDate, 1, -1);\n      var daysInMonth = initialDate.getDate();\n\n      if (daysInMonth >= Math.abs(value)) {\n        setDateByNegativeValue(date, 1, value);\n      } else {\n        setDateByNegativeValue(date, 2, value);\n      }\n    } else {\n      date.setDate(value);\n      correctDate(date, value);\n    }\n  },\n  byday: function (date, byDay, appointmentWeekStart, frequency, firstDayOfWeek) {\n    var appointmentDayOfWeek = date.getDay();\n    var weekStart = days[appointmentWeekStart];\n    byDay += byDay >= weekStart === weekStart > appointmentDayOfWeek ? 7 : 0;\n    date.setDate(date.getDate() - appointmentDayOfWeek + byDay);\n  },\n  byweekno: function (date, weekNumber, weekStart) {\n    var initialDate = new Date(date);\n    var firstYearDate = new Date(initialDate.setMonth(0, 1));\n    var dayShift = firstYearDate.getDay() - days[weekStart];\n    var firstDayOfYear = firstYearDate.getTime() - dayShift * toMs(\"day\");\n    var newFirstYearDate = dayShift + 1;\n\n    if (newFirstYearDate > leastDaysInWeek) {\n      date.setTime(firstDayOfYear + 7 * weekNumber * toMs(\"day\"));\n    } else {\n      date.setTime(firstDayOfYear + 7 * (weekNumber - 1) * toMs(\"day\"));\n    }\n\n    var timezoneDiff = (date.getTimezoneOffset() - firstYearDate.getTimezoneOffset()) * toMs(\"minute\");\n    timezoneDiff && date.setTime(date.getTime() + timezoneDiff);\n  },\n  byyearday: function (date, dayOfYear) {\n    date.setMonth(0, 1);\n    date.setDate(dayOfYear);\n  }\n};\n\nvar setDateByNegativeValue = function (date, month, value) {\n  var initialDate = new Date(date);\n  date.setMonth(date.getMonth() + month);\n\n  if (date.getMonth() - initialDate.getMonth() > month) {\n    date.setDate(value + 1);\n  }\n\n  date.setDate(value + 1);\n};\n\nvar dateGetterMap = {\n  bysecond: function (date) {\n    return date.getSeconds();\n  },\n  byminute: function (date) {\n    return date.getMinutes();\n  },\n  byhour: function (date) {\n    return date.getHours();\n  },\n  bymonth: function (date) {\n    return date.getMonth();\n  },\n  bymonthday: function (date) {\n    return date.getDate();\n  },\n  byday: function (date) {\n    return date.getDay();\n  },\n  byweekno: function (date, weekStart) {\n    var daysFromYearStart;\n    var current = new Date(date);\n    var diff = leastDaysInWeek - current.getDay() + days[weekStart] - 1;\n    var dayInMilliseconds = toMs(\"day\");\n\n    if (date.getDay() < days[weekStart]) {\n      diff -= 7;\n    }\n\n    current.setHours(0, 0, 0);\n    current.setDate(current.getDate() + diff);\n    var yearStart = new Date(current.getFullYear(), 0, 1);\n    var timezoneDiff = (yearStart.getTimezoneOffset() - current.getTimezoneOffset()) * toMs(\"minute\");\n    daysFromYearStart = 1 + (current - yearStart + timezoneDiff) / dayInMilliseconds;\n    return Math.ceil(daysFromYearStart / 7);\n  },\n  byyearday: function (date) {\n    var yearStart = new Date(date.getFullYear(), 0, 0);\n    var timezoneDiff = date.getTimezoneOffset() - yearStart.getTimezoneOffset();\n    var diff = date - yearStart - timezoneDiff * toMs(\"minute\");\n    var dayLength = toMs(\"day\");\n    return Math.floor(diff / dayLength);\n  }\n};\nvar ruleNames = [\"freq\", \"interval\", \"byday\", \"byweekno\", \"byyearday\", \"bymonth\", \"bymonthday\", \"count\", \"until\", \"byhour\", \"byminute\", \"bysecond\", \"bysetpos\", \"wkst\"];\nvar freqNames = [\"DAILY\", \"WEEKLY\", \"MONTHLY\", \"YEARLY\", \"SECONDLY\", \"MINUTELY\", \"HOURLY\"];\nvar days = {\n  SU: 0,\n  MO: 1,\n  TU: 2,\n  WE: 3,\n  TH: 4,\n  FR: 5,\n  SA: 6\n};\nvar daysNames = {\n  0: \"SU\",\n  1: \"MO\",\n  2: \"TU\",\n  3: \"WE\",\n  4: \"TH\",\n  5: \"FR\",\n  6: \"SA\"\n};\n\nvar getTimeZoneOffset = function () {\n  return new Date().getTimezoneOffset();\n};\n\nvar dateInRecurrenceRange = function (options) {\n  var result = [];\n\n  if (options.rule) {\n    result = getDatesByRecurrence(options);\n  }\n\n  return !!result.length;\n};\n\nvar normalizeInterval = function (rule) {\n  var interval = rule.interval;\n  var freq = rule.freq;\n  var intervalObject = {};\n  var intervalField = intervalMap[freq.toLowerCase()];\n\n  if (\"MONTHLY\" === freq && rule.byday) {\n    intervalField = intervalMap.daily;\n  }\n\n  intervalObject[intervalField] = interval;\n  return intervalObject;\n};\n\nvar getDatesByRecurrenceException = function (ruleValues, date) {\n  var result = [];\n\n  for (var i = 0, len = ruleValues.length; i < len; i++) {\n    result[i] = getDateByAsciiString(ruleValues[i], date);\n  }\n\n  return result;\n};\n\nvar dateIsRecurrenceException = function (date, recurrenceException) {\n  var result = false;\n\n  if (!recurrenceException) {\n    return result;\n  }\n\n  var splitDates = recurrenceException.split(\",\");\n  var exceptDates = getDatesByRecurrenceException(splitDates, date);\n  var shortFormat = /\\d{8}$/;\n\n  for (var i = 0, len = exceptDates.length; i < len; i++) {\n    if (splitDates[i].match(shortFormat)) {\n      var diffs = getDatePartDiffs(date, exceptDates[i]);\n\n      if (0 === diffs.years && 0 === diffs.months && 0 === diffs.days) {\n        result = true;\n      }\n    } else {\n      if (date.getTime() === exceptDates[i].getTime()) {\n        result = true;\n      }\n    }\n  }\n\n  return result;\n};\n\nvar doNextIteration = function (date, startIntervalDate, endIntervalDate, recurrenceRule, iterationCount) {\n  var matchCountIsCorrect = true;\n  var dateInInterval;\n  endIntervalDate = endIntervalDate.getTime();\n\n  if (recurrenceRule.until) {\n    if (recurrenceRule.until.getTime() < endIntervalDate) {\n      endIntervalDate = recurrenceRule.until.getTime();\n    }\n  }\n\n  if (recurrenceRule.count) {\n    if (iterationCount === recurrenceRule.count) {\n      matchCountIsCorrect = false;\n    }\n  }\n\n  dateInInterval = date.getTime() <= endIntervalDate;\n  return dateInInterval && matchCountIsCorrect;\n};\n\nvar getDatesByRecurrence = function (options) {\n  var result = [];\n  var recurrenceRule = getRecurrenceRule(options.rule);\n  var iterationResult = {};\n  var rule = recurrenceRule.rule;\n  var recurrenceStartDate = options.start;\n  var dateRules;\n\n  if (!recurrenceRule.isValid || !rule.freq) {\n    return result;\n  }\n\n  rule.interval = normalizeInterval(rule);\n  dateRules = splitDateRules(rule, options.firstDayOfWeek);\n  var duration = options.end ? options.end.getTime() - options.start.getTime() : toMs(\"day\");\n  var config = {\n    exception: options.exception,\n    min: options.min,\n    dateRules: dateRules,\n    rule: rule,\n    recurrenceStartDate: recurrenceStartDate,\n    recurrenceEndDate: options.end,\n    duration: duration\n  };\n\n  if (dateRules.length && rule.count) {\n    var iteration = 0;\n    getDatesByCount(dateRules, new Date(recurrenceStartDate), new Date(recurrenceStartDate), rule).forEach(function (currentDate, i) {\n      if (currentDate < options.max) {\n        iteration++;\n        iterationResult = pushToResult(iteration, iterationResult, currentDate, i, config, true);\n      }\n    });\n  } else {\n    getDatesByRules(dateRules, new Date(recurrenceStartDate), rule).forEach(function (currentDate, i) {\n      var iteration = 0;\n\n      while (doNextIteration(currentDate, recurrenceStartDate, options.max, rule, iteration)) {\n        iteration++;\n        iterationResult = pushToResult(iteration, iterationResult, currentDate, i, config);\n        currentDate = incrementDate(currentDate, recurrenceStartDate, rule, i);\n      }\n    });\n  }\n\n  if (rule.bysetpos) {\n    each(iterationResult, function (iterationIndex, iterationDates) {\n      iterationResult[iterationIndex] = filterDatesBySetPos(iterationDates, rule.bysetpos);\n    });\n  }\n\n  each(iterationResult, function (_, iterationDates) {\n    result = result.concat(iterationDates);\n  });\n  result.sort(function (a, b) {\n    return a - b;\n  });\n  return result;\n};\n\nvar pushToResult = function (iteration, iterationResult, currentDate, i, config, verifiedField) {\n  if (!iterationResult[iteration]) {\n    iterationResult[iteration] = [];\n  }\n\n  if (checkDate(currentDate, i, config, verifiedField)) {\n    iterationResult[iteration].push(currentDate);\n  }\n\n  return iterationResult;\n};\n\nvar checkDate = function (currentDate, i, config, verifiedField) {\n  if (!dateIsRecurrenceException(currentDate, config.exception)) {\n    var duration = dateUtils.sameDate(currentDate, config.recurrenceEndDate) && config.recurrenceEndDate.getTime() > currentDate.getTime() ? config.recurrenceEndDate.getTime() - currentDate.getTime() : config.duration;\n\n    if (currentDate.getTime() >= config.recurrenceStartDate.getTime() && currentDate.getTime() + duration > config.min.getTime()) {\n      return verifiedField || checkDateByRule(currentDate, [config.dateRules[i]], config.rule.wkst);\n    }\n  }\n\n  return false;\n};\n\nvar filterDatesBySetPos = function (dates, bySetPos) {\n  var resultArray = [];\n  bySetPos.split(\",\").forEach(function (index) {\n    index = Number(index);\n    var dateIndex = index > 0 ? index - 1 : dates.length + index;\n\n    if (dates[dateIndex]) {\n      resultArray.push(dates[dateIndex]);\n    }\n  });\n  return resultArray;\n};\n\nvar correctDate = function (originalDate, date) {\n  if (originalDate.getDate() !== date) {\n    originalDate.setDate(date);\n  }\n};\n\nvar incrementDate = function (date, originalStartDate, rule, iterationStep) {\n  var initialDate = new Date(date);\n  var needCorrect = true;\n  date = dateUtils.addInterval(date, rule.interval);\n\n  if (\"DAILY\" === rule.freq && !isDefined(rule.byhour) && originalStartDate.getHours() !== date.getHours()) {\n    date = new Date(date.getTime() - (initialDate.getHours() - originalStartDate.getHours()) * toMs(\"hour\"));\n  }\n\n  if (\"MONTHLY\" === rule.freq && !rule.byday) {\n    var expectedDate = originalStartDate.getDate();\n\n    if (rule.bymonthday) {\n      expectedDate = Number(rule.bymonthday.split(\",\")[iterationStep]);\n\n      if (expectedDate < 0) {\n        initialDate.setMonth(initialDate.getMonth() + 1, 1);\n        dateSetterMap.bymonthday(initialDate, expectedDate);\n        date = initialDate;\n        needCorrect = false;\n      }\n    }\n\n    needCorrect && correctDate(date, expectedDate);\n  }\n\n  if (\"YEARLY\" === rule.freq) {\n    if (rule.byyearday) {\n      var dayNumber = Number(rule.byyearday.split(\",\")[iterationStep]);\n      dateSetterMap.byyearday(date, dayNumber);\n    }\n\n    var dateRules = splitDateRules(rule);\n\n    for (var field in dateRules[iterationStep]) {\n      dateSetterMap[field] && dateSetterMap[field](date, dateRules[iterationStep][field], rule.wkst);\n    }\n  }\n\n  return date;\n};\n\nvar getDatePartDiffs = function (date1, date2) {\n  return {\n    years: date1.getFullYear() - date2.getFullYear(),\n    months: date1.getMonth() - date2.getMonth(),\n    days: date1.getDate() - date2.getDate(),\n    hours: date1.getHours() - date2.getHours(),\n    minutes: date1.getMinutes() - date2.getMinutes(),\n    seconds: date1.getSeconds() - date2.getSeconds()\n  };\n};\n\nvar getRecurrenceRule = function (recurrence) {\n  var result = {\n    rule: {},\n    isValid: false\n  };\n\n  if (recurrence) {\n    result.rule = parseRecurrenceRule(recurrence);\n    result.isValid = validateRRule(result.rule, recurrence);\n  }\n\n  return result;\n};\n\nvar loggedWarnings = [];\n\nvar validateRRule = function (rule, recurrence) {\n  if (brokenRuleNameExists(rule) || inArray(rule.freq, freqNames) === -1 || wrongCountRule(rule) || wrongIntervalRule(rule) || wrongDayOfWeek(rule) || wrongByMonthDayRule(rule) || wrongByMonth(rule) || wrongUntilRule(rule)) {\n    logBrokenRule(recurrence);\n    return false;\n  }\n\n  return true;\n};\n\nvar wrongUntilRule = function (rule) {\n  var wrongUntil = false;\n  var until = rule.until;\n\n  if (void 0 !== until && !(until instanceof Date)) {\n    wrongUntil = true;\n  }\n\n  return wrongUntil;\n};\n\nvar wrongCountRule = function (rule) {\n  var wrongCount = false;\n  var count = rule.count;\n\n  if (count && \"string\" === typeof count) {\n    wrongCount = true;\n  }\n\n  return wrongCount;\n};\n\nvar wrongByMonthDayRule = function (rule) {\n  var wrongByMonthDay = false;\n  var byMonthDay = rule.bymonthday;\n\n  if (byMonthDay && isNaN(parseInt(byMonthDay))) {\n    wrongByMonthDay = true;\n  }\n\n  return wrongByMonthDay;\n};\n\nvar wrongByMonth = function wrongByMonth(rule) {\n  var wrongByMonth = false;\n  var byMonth = rule.bymonth;\n\n  if (byMonth && isNaN(parseInt(byMonth))) {\n    wrongByMonth = true;\n  }\n\n  return wrongByMonth;\n};\n\nvar wrongIntervalRule = function (rule) {\n  var wrongInterval = false;\n  var interval = rule.interval;\n\n  if (interval && \"string\" === typeof interval) {\n    wrongInterval = true;\n  }\n\n  return wrongInterval;\n};\n\nvar wrongDayOfWeek = function (rule) {\n  var daysByRule = daysFromByDayRule(rule);\n  var brokenDaysExist = false;\n  each(daysByRule, function (_, day) {\n    if (!Object.prototype.hasOwnProperty.call(days, day)) {\n      brokenDaysExist = true;\n      return false;\n    }\n  });\n  return brokenDaysExist;\n};\n\nvar brokenRuleNameExists = function (rule) {\n  var brokenRuleExists = false;\n  each(rule, function (ruleName) {\n    if (inArray(ruleName, ruleNames) === -1) {\n      brokenRuleExists = true;\n      return false;\n    }\n  });\n  return brokenRuleExists;\n};\n\nvar logBrokenRule = function (recurrence) {\n  if (inArray(recurrence, loggedWarnings) === -1) {\n    errors.log(\"W0006\", recurrence);\n    loggedWarnings.push(recurrence);\n  }\n};\n\nvar parseRecurrenceRule = function (recurrence) {\n  var ruleObject = {};\n  var ruleParts = recurrence.split(\";\");\n\n  for (var i = 0, len = ruleParts.length; i < len; i++) {\n    var rule = ruleParts[i].split(\"=\");\n    var ruleName = rule[0].toLowerCase();\n    var ruleValue = rule[1];\n    ruleObject[ruleName] = ruleValue;\n  }\n\n  var count = parseInt(ruleObject.count);\n\n  if (!isNaN(count)) {\n    ruleObject.count = count;\n  }\n\n  if (ruleObject.interval) {\n    var interval = parseInt(ruleObject.interval);\n\n    if (!isNaN(interval)) {\n      ruleObject.interval = interval;\n    }\n  } else {\n    ruleObject.interval = 1;\n  }\n\n  if (ruleObject.freq && ruleObject.until) {\n    ruleObject.until = getDateByAsciiString(ruleObject.until);\n  }\n\n  return ruleObject;\n};\n\nvar getDateByAsciiString = function (string, initialDate) {\n  if (\"string\" !== typeof string) {\n    return string;\n  }\n\n  var arrayDate = string.match(/(\\d{4})(\\d{2})(\\d{2})(T(\\d{2})(\\d{2})(\\d{2}))?(Z)?/);\n\n  if (!arrayDate) {\n    return null;\n  }\n\n  var isUTC = void 0 !== arrayDate[8];\n  var currentOffset = initialDate ? initialDate.getTimezoneOffset() : resultUtils.getTimeZoneOffset();\n  var date = new (Function.prototype.bind.apply(Date, prepareDateArrayToParse(arrayDate)))();\n  currentOffset = 6e4 * currentOffset;\n\n  if (isUTC) {\n    date = new Date(date.getTime() - currentOffset);\n  }\n\n  return date;\n};\n\nvar prepareDateArrayToParse = function (arrayDate) {\n  arrayDate.shift();\n\n  if (void 0 === arrayDate[3]) {\n    arrayDate.splice(3);\n  } else {\n    arrayDate.splice(3, 1);\n    arrayDate.splice(6);\n  }\n\n  arrayDate[1]--;\n  arrayDate.unshift(null);\n  return arrayDate;\n};\n\nvar daysFromByDayRule = function (rule) {\n  var result = [];\n\n  if (rule.byday) {\n    if (Array.isArray(rule.byday)) {\n      result = rule.byday;\n    } else {\n      result = rule.byday.split(\",\");\n    }\n  }\n\n  return result;\n};\n\nvar getAsciiStringByDate = function (date) {\n  var currentOffset = 6e4 * resultUtils.getTimeZoneOffset();\n  date = new Date(date.getTime() + currentOffset);\n  return date.getFullYear() + (\"0\" + (date.getMonth() + 1)).slice(-2) + (\"0\" + date.getDate()).slice(-2) + \"T\" + (\"0\" + date.getHours()).slice(-2) + (\"0\" + date.getMinutes()).slice(-2) + (\"0\" + date.getSeconds()).slice(-2) + \"Z\";\n};\n\nvar splitDateRules = function (rule) {\n  var firstDayOfWeek = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null;\n  var result = [];\n\n  if (isDefined(firstDayOfWeek)) {\n    rule.fdow = firstDayOfWeek;\n  }\n\n  if (!rule.wkst) {\n    rule.wkst = isDefined(firstDayOfWeek) ? daysNames[firstDayOfWeek] : \"MO\";\n  }\n\n  if (rule.byweekno && !rule.byday) {\n    var dayNames = Object.keys(days);\n\n    for (var i = 0; i < days[rule.wkst]; i++) {\n      dayNames.push(dayNames.shift());\n    }\n\n    rule.byday = dayNames.join(\",\");\n  }\n\n  for (var field in dateSetterMap) {\n    if (!rule[field]) {\n      continue;\n    }\n\n    var ruleFieldValues = rule[field].split(\",\");\n    var ruleArray = getDateRuleArray(field, ruleFieldValues);\n    result = result.length ? extendObjectArray(ruleArray, result) : ruleArray;\n  }\n\n  return result;\n};\n\nvar getDateRuleArray = function (field, values) {\n  var result = [];\n\n  for (var i = 0, length = values.length; i < length; i++) {\n    var dateRule = {};\n    dateRule[field] = handleRuleFieldValue(field, values[i]);\n    result.push(dateRule);\n  }\n\n  return result;\n};\n\nvar handleRuleFieldValue = function (field, value) {\n  var result = parseInt(value);\n\n  if (\"bymonth\" === field) {\n    result -= 1;\n  }\n\n  if (\"byday\" === field) {\n    result = days[value];\n  }\n\n  return result;\n};\n\nvar extendObjectArray = function (firstArray, secondArray) {\n  var result = [];\n\n  for (var i = 0, firstArrayLength = firstArray.length; i < firstArrayLength; i++) {\n    for (var j = 0, secondArrayLength = secondArray.length; j < secondArrayLength; j++) {\n      result.push(extend({}, firstArray[i], secondArray[j]));\n    }\n  }\n\n  return result;\n};\n\nvar getDatesByRules = function (dateRules, startDate, rule) {\n  var result = [];\n\n  for (var i = 0, len = dateRules.length; i < len; i++) {\n    var current = dateRules[i];\n    var updatedDate = prepareDate(startDate, dateRules, rule.wkst);\n\n    for (var field in current) {\n      dateSetterMap[field] && dateSetterMap[field](updatedDate, current[field], rule.wkst, rule.freq, rule.fdow);\n    }\n\n    if (Array.isArray(updatedDate)) {\n      result = result.concat(updatedDate);\n    } else {\n      result.push(new Date(updatedDate));\n    }\n  }\n\n  if (!result.length) {\n    result.push(startDate);\n  }\n\n  return result;\n};\n\nvar getDatesByCount = function (dateRules, startDate, recurrenceStartDate, rule) {\n  var result = [];\n  var count = rule.count;\n  var counter = 0;\n  var date = prepareDate(startDate, dateRules, rule.wkst);\n\n  while (counter < count) {\n    var dates = getDatesByRules(dateRules, date, rule);\n    var checkedDates = [];\n\n    for (var i = 0; i < dates.length; i++) {\n      if (dates[i].getTime() >= recurrenceStartDate.getTime()) {\n        checkedDates.push(dates[i]);\n      }\n    }\n\n    var length = checkedDates.length;\n    counter += length;\n    var delCount = counter - count;\n\n    if (counter > count) {\n      checkedDates.splice(length - delCount, delCount);\n    }\n\n    for (i = 0; i < checkedDates.length; i++) {\n      result.push(checkedDates[i]);\n    }\n\n    var interval = rule.interval;\n\n    if (\"days\" === Object.keys(interval)[0]) {\n      interval = {\n        weeks: 1\n      };\n    }\n\n    date = dateUtils.addInterval(date, interval);\n  }\n\n  return result;\n};\n\nvar prepareDate = function (startDate, dateRules, weekStartRule) {\n  var date = new Date(startDate);\n  var day = date.getDay();\n\n  if (dateRules.length && isDefined(dateRules[0].byday)) {\n    date.setDate(date.getDate() - day + days[weekStartRule] - (day < days[weekStartRule] ? 7 : 0));\n  } else {\n    date.setDate(1);\n  }\n\n  return date;\n};\n\nvar checkDateByRule = function (date, rules, weekStart) {\n  var result = false;\n\n  for (var i = 0; i < rules.length; i++) {\n    var current = rules[i];\n    var currentRuleResult = true;\n\n    for (var field in current) {\n      var processNegative = \"bymonthday\" === field && current[field] < 0;\n\n      if (dateGetterMap[field] && !processNegative && current[field] !== dateGetterMap[field](date, weekStart)) {\n        currentRuleResult = false;\n      }\n    }\n\n    result = result || currentRuleResult;\n  }\n\n  return result || !rules.length;\n};\n\nvar getRecurrenceString = function (object) {\n  if (!object || !object.freq) {\n    return;\n  }\n\n  var result = \"\";\n\n  for (var field in object) {\n    var value = object[field];\n\n    if (\"interval\" === field && value < 2) {\n      continue;\n    }\n\n    if (\"until\" === field) {\n      value = getAsciiStringByDate(value);\n    }\n\n    result += field + \"=\" + value + \";\";\n  }\n\n  result = result.substring(0, result.length - 1);\n  return result.toUpperCase();\n};\n\nvar resultUtils = {\n  getRecurrenceString: getRecurrenceString,\n  getRecurrenceRule: getRecurrenceRule,\n  getAsciiStringByDate: getAsciiStringByDate,\n  getDatesByRecurrence: getDatesByRecurrence,\n  dateInRecurrenceRange: dateInRecurrenceRange,\n  getDateByAsciiString: getDateByAsciiString,\n  daysFromByDayRule: daysFromByDayRule,\n  getTimeZoneOffset: getTimeZoneOffset\n};\nmodule.exports = resultUtils;","map":{"version":3,"sources":["C:/Users/Swizzle/Desktop/SE Project/Application/csh/node_modules/devextreme/ui/scheduler/utils.recurrence.js"],"names":["errors","require","extend","each","inArray","isDefined","dateUtils","toMs","dateToMilliseconds","leastDaysInWeek","intervalMap","secondly","minutely","hourly","daily","weekly","monthly","yearly","dateSetterMap","bysecond","date","value","setSeconds","byminute","setMinutes","byhour","setHours","bymonth","setMonth","bymonthday","initialDate","Date","setDateByNegativeValue","daysInMonth","getDate","Math","abs","setDate","correctDate","byday","byDay","appointmentWeekStart","frequency","firstDayOfWeek","appointmentDayOfWeek","getDay","weekStart","days","byweekno","weekNumber","firstYearDate","dayShift","firstDayOfYear","getTime","newFirstYearDate","setTime","timezoneDiff","getTimezoneOffset","byyearday","dayOfYear","month","getMonth","dateGetterMap","getSeconds","getMinutes","getHours","daysFromYearStart","current","diff","dayInMilliseconds","yearStart","getFullYear","ceil","dayLength","floor","ruleNames","freqNames","SU","MO","TU","WE","TH","FR","SA","daysNames","getTimeZoneOffset","dateInRecurrenceRange","options","result","rule","getDatesByRecurrence","length","normalizeInterval","interval","freq","intervalObject","intervalField","toLowerCase","getDatesByRecurrenceException","ruleValues","i","len","getDateByAsciiString","dateIsRecurrenceException","recurrenceException","splitDates","split","exceptDates","shortFormat","match","diffs","getDatePartDiffs","years","months","doNextIteration","startIntervalDate","endIntervalDate","recurrenceRule","iterationCount","matchCountIsCorrect","dateInInterval","until","count","getRecurrenceRule","iterationResult","recurrenceStartDate","start","dateRules","isValid","splitDateRules","duration","end","config","exception","min","recurrenceEndDate","iteration","getDatesByCount","forEach","currentDate","max","pushToResult","getDatesByRules","incrementDate","bysetpos","iterationIndex","iterationDates","filterDatesBySetPos","_","concat","sort","a","b","verifiedField","checkDate","push","sameDate","checkDateByRule","wkst","dates","bySetPos","resultArray","index","Number","dateIndex","originalDate","originalStartDate","iterationStep","needCorrect","addInterval","expectedDate","dayNumber","field","date1","date2","hours","minutes","seconds","recurrence","parseRecurrenceRule","validateRRule","loggedWarnings","brokenRuleNameExists","wrongCountRule","wrongIntervalRule","wrongDayOfWeek","wrongByMonthDayRule","wrongByMonth","wrongUntilRule","logBrokenRule","wrongUntil","wrongCount","wrongByMonthDay","byMonthDay","isNaN","parseInt","byMonth","wrongInterval","daysByRule","daysFromByDayRule","brokenDaysExist","day","Object","prototype","hasOwnProperty","call","brokenRuleExists","ruleName","log","ruleObject","ruleParts","ruleValue","string","arrayDate","isUTC","currentOffset","resultUtils","Function","bind","apply","prepareDateArrayToParse","shift","splice","unshift","Array","isArray","getAsciiStringByDate","slice","arguments","fdow","dayNames","keys","join","ruleFieldValues","ruleArray","getDateRuleArray","extendObjectArray","values","dateRule","handleRuleFieldValue","firstArray","secondArray","firstArrayLength","j","secondArrayLength","startDate","updatedDate","prepareDate","counter","checkedDates","delCount","weeks","weekStartRule","rules","currentRuleResult","processNegative","getRecurrenceString","object","substring","toUpperCase","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (ui/scheduler/utils.recurrence.js)\r\n * Version: 19.2.6\r\n * Build date: Thu Jan 30 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar errors = require(\"../../core/errors\");\r\nvar extend = require(\"../../core/utils/extend\").extend;\r\nvar each = require(\"../../core/utils/iterator\").each;\r\nvar inArray = require(\"../../core/utils/array\").inArray;\r\nvar isDefined = require(\"../../core/utils/type\").isDefined;\r\nvar dateUtils = require(\"../../core/utils/date\");\r\nvar toMs = dateUtils.dateToMilliseconds;\r\nvar leastDaysInWeek = 4;\r\nvar intervalMap = {\r\n    secondly: \"seconds\",\r\n    minutely: \"minutes\",\r\n    hourly: \"hours\",\r\n    daily: \"days\",\r\n    weekly: \"weeks\",\r\n    monthly: \"months\",\r\n    yearly: \"years\"\r\n};\r\nvar dateSetterMap = {\r\n    bysecond: function(date, value) {\r\n        date.setSeconds(value)\r\n    },\r\n    byminute: function(date, value) {\r\n        date.setMinutes(value)\r\n    },\r\n    byhour: function(date, value) {\r\n        date.setHours(value)\r\n    },\r\n    bymonth: function(date, value) {\r\n        date.setMonth(value)\r\n    },\r\n    bymonthday: function(date, value) {\r\n        if (value < 0) {\r\n            var initialDate = new Date(date);\r\n            setDateByNegativeValue(initialDate, 1, -1);\r\n            var daysInMonth = initialDate.getDate();\r\n            if (daysInMonth >= Math.abs(value)) {\r\n                setDateByNegativeValue(date, 1, value)\r\n            } else {\r\n                setDateByNegativeValue(date, 2, value)\r\n            }\r\n        } else {\r\n            date.setDate(value);\r\n            correctDate(date, value)\r\n        }\r\n    },\r\n    byday: function(date, byDay, appointmentWeekStart, frequency, firstDayOfWeek) {\r\n        var appointmentDayOfWeek = date.getDay();\r\n        var weekStart = days[appointmentWeekStart];\r\n        byDay += byDay >= weekStart === weekStart > appointmentDayOfWeek ? 7 : 0;\r\n        date.setDate(date.getDate() - appointmentDayOfWeek + byDay)\r\n    },\r\n    byweekno: function(date, weekNumber, weekStart) {\r\n        var initialDate = new Date(date);\r\n        var firstYearDate = new Date(initialDate.setMonth(0, 1));\r\n        var dayShift = firstYearDate.getDay() - days[weekStart];\r\n        var firstDayOfYear = firstYearDate.getTime() - dayShift * toMs(\"day\");\r\n        var newFirstYearDate = dayShift + 1;\r\n        if (newFirstYearDate > leastDaysInWeek) {\r\n            date.setTime(firstDayOfYear + 7 * weekNumber * toMs(\"day\"))\r\n        } else {\r\n            date.setTime(firstDayOfYear + 7 * (weekNumber - 1) * toMs(\"day\"))\r\n        }\r\n        var timezoneDiff = (date.getTimezoneOffset() - firstYearDate.getTimezoneOffset()) * toMs(\"minute\");\r\n        timezoneDiff && date.setTime(date.getTime() + timezoneDiff)\r\n    },\r\n    byyearday: function(date, dayOfYear) {\r\n        date.setMonth(0, 1);\r\n        date.setDate(dayOfYear)\r\n    }\r\n};\r\nvar setDateByNegativeValue = function(date, month, value) {\r\n    var initialDate = new Date(date);\r\n    date.setMonth(date.getMonth() + month);\r\n    if (date.getMonth() - initialDate.getMonth() > month) {\r\n        date.setDate(value + 1)\r\n    }\r\n    date.setDate(value + 1)\r\n};\r\nvar dateGetterMap = {\r\n    bysecond: function(date) {\r\n        return date.getSeconds()\r\n    },\r\n    byminute: function(date) {\r\n        return date.getMinutes()\r\n    },\r\n    byhour: function(date) {\r\n        return date.getHours()\r\n    },\r\n    bymonth: function(date) {\r\n        return date.getMonth()\r\n    },\r\n    bymonthday: function(date) {\r\n        return date.getDate()\r\n    },\r\n    byday: function(date) {\r\n        return date.getDay()\r\n    },\r\n    byweekno: function(date, weekStart) {\r\n        var daysFromYearStart;\r\n        var current = new Date(date);\r\n        var diff = leastDaysInWeek - current.getDay() + days[weekStart] - 1;\r\n        var dayInMilliseconds = toMs(\"day\");\r\n        if (date.getDay() < days[weekStart]) {\r\n            diff -= 7\r\n        }\r\n        current.setHours(0, 0, 0);\r\n        current.setDate(current.getDate() + diff);\r\n        var yearStart = new Date(current.getFullYear(), 0, 1);\r\n        var timezoneDiff = (yearStart.getTimezoneOffset() - current.getTimezoneOffset()) * toMs(\"minute\");\r\n        daysFromYearStart = 1 + (current - yearStart + timezoneDiff) / dayInMilliseconds;\r\n        return Math.ceil(daysFromYearStart / 7)\r\n    },\r\n    byyearday: function(date) {\r\n        var yearStart = new Date(date.getFullYear(), 0, 0);\r\n        var timezoneDiff = date.getTimezoneOffset() - yearStart.getTimezoneOffset();\r\n        var diff = date - yearStart - timezoneDiff * toMs(\"minute\");\r\n        var dayLength = toMs(\"day\");\r\n        return Math.floor(diff / dayLength)\r\n    }\r\n};\r\nvar ruleNames = [\"freq\", \"interval\", \"byday\", \"byweekno\", \"byyearday\", \"bymonth\", \"bymonthday\", \"count\", \"until\", \"byhour\", \"byminute\", \"bysecond\", \"bysetpos\", \"wkst\"];\r\nvar freqNames = [\"DAILY\", \"WEEKLY\", \"MONTHLY\", \"YEARLY\", \"SECONDLY\", \"MINUTELY\", \"HOURLY\"];\r\nvar days = {\r\n    SU: 0,\r\n    MO: 1,\r\n    TU: 2,\r\n    WE: 3,\r\n    TH: 4,\r\n    FR: 5,\r\n    SA: 6\r\n};\r\nvar daysNames = {\r\n    0: \"SU\",\r\n    1: \"MO\",\r\n    2: \"TU\",\r\n    3: \"WE\",\r\n    4: \"TH\",\r\n    5: \"FR\",\r\n    6: \"SA\"\r\n};\r\nvar getTimeZoneOffset = function() {\r\n    return (new Date).getTimezoneOffset()\r\n};\r\nvar dateInRecurrenceRange = function(options) {\r\n    var result = [];\r\n    if (options.rule) {\r\n        result = getDatesByRecurrence(options)\r\n    }\r\n    return !!result.length\r\n};\r\nvar normalizeInterval = function(rule) {\r\n    var interval = rule.interval;\r\n    var freq = rule.freq;\r\n    var intervalObject = {};\r\n    var intervalField = intervalMap[freq.toLowerCase()];\r\n    if (\"MONTHLY\" === freq && rule.byday) {\r\n        intervalField = intervalMap.daily\r\n    }\r\n    intervalObject[intervalField] = interval;\r\n    return intervalObject\r\n};\r\nvar getDatesByRecurrenceException = function(ruleValues, date) {\r\n    var result = [];\r\n    for (var i = 0, len = ruleValues.length; i < len; i++) {\r\n        result[i] = getDateByAsciiString(ruleValues[i], date)\r\n    }\r\n    return result\r\n};\r\nvar dateIsRecurrenceException = function(date, recurrenceException) {\r\n    var result = false;\r\n    if (!recurrenceException) {\r\n        return result\r\n    }\r\n    var splitDates = recurrenceException.split(\",\");\r\n    var exceptDates = getDatesByRecurrenceException(splitDates, date);\r\n    var shortFormat = /\\d{8}$/;\r\n    for (var i = 0, len = exceptDates.length; i < len; i++) {\r\n        if (splitDates[i].match(shortFormat)) {\r\n            var diffs = getDatePartDiffs(date, exceptDates[i]);\r\n            if (0 === diffs.years && 0 === diffs.months && 0 === diffs.days) {\r\n                result = true\r\n            }\r\n        } else {\r\n            if (date.getTime() === exceptDates[i].getTime()) {\r\n                result = true\r\n            }\r\n        }\r\n    }\r\n    return result\r\n};\r\nvar doNextIteration = function(date, startIntervalDate, endIntervalDate, recurrenceRule, iterationCount) {\r\n    var matchCountIsCorrect = true;\r\n    var dateInInterval;\r\n    endIntervalDate = endIntervalDate.getTime();\r\n    if (recurrenceRule.until) {\r\n        if (recurrenceRule.until.getTime() < endIntervalDate) {\r\n            endIntervalDate = recurrenceRule.until.getTime()\r\n        }\r\n    }\r\n    if (recurrenceRule.count) {\r\n        if (iterationCount === recurrenceRule.count) {\r\n            matchCountIsCorrect = false\r\n        }\r\n    }\r\n    dateInInterval = date.getTime() <= endIntervalDate;\r\n    return dateInInterval && matchCountIsCorrect\r\n};\r\nvar getDatesByRecurrence = function(options) {\r\n    var result = [];\r\n    var recurrenceRule = getRecurrenceRule(options.rule);\r\n    var iterationResult = {};\r\n    var rule = recurrenceRule.rule;\r\n    var recurrenceStartDate = options.start;\r\n    var dateRules;\r\n    if (!recurrenceRule.isValid || !rule.freq) {\r\n        return result\r\n    }\r\n    rule.interval = normalizeInterval(rule);\r\n    dateRules = splitDateRules(rule, options.firstDayOfWeek);\r\n    var duration = options.end ? options.end.getTime() - options.start.getTime() : toMs(\"day\");\r\n    var config = {\r\n        exception: options.exception,\r\n        min: options.min,\r\n        dateRules: dateRules,\r\n        rule: rule,\r\n        recurrenceStartDate: recurrenceStartDate,\r\n        recurrenceEndDate: options.end,\r\n        duration: duration\r\n    };\r\n    if (dateRules.length && rule.count) {\r\n        var iteration = 0;\r\n        getDatesByCount(dateRules, new Date(recurrenceStartDate), new Date(recurrenceStartDate), rule).forEach(function(currentDate, i) {\r\n            if (currentDate < options.max) {\r\n                iteration++;\r\n                iterationResult = pushToResult(iteration, iterationResult, currentDate, i, config, true)\r\n            }\r\n        })\r\n    } else {\r\n        getDatesByRules(dateRules, new Date(recurrenceStartDate), rule).forEach(function(currentDate, i) {\r\n            var iteration = 0;\r\n            while (doNextIteration(currentDate, recurrenceStartDate, options.max, rule, iteration)) {\r\n                iteration++;\r\n                iterationResult = pushToResult(iteration, iterationResult, currentDate, i, config);\r\n                currentDate = incrementDate(currentDate, recurrenceStartDate, rule, i)\r\n            }\r\n        })\r\n    }\r\n    if (rule.bysetpos) {\r\n        each(iterationResult, function(iterationIndex, iterationDates) {\r\n            iterationResult[iterationIndex] = filterDatesBySetPos(iterationDates, rule.bysetpos)\r\n        })\r\n    }\r\n    each(iterationResult, function(_, iterationDates) {\r\n        result = result.concat(iterationDates)\r\n    });\r\n    result.sort(function(a, b) {\r\n        return a - b\r\n    });\r\n    return result\r\n};\r\nvar pushToResult = function(iteration, iterationResult, currentDate, i, config, verifiedField) {\r\n    if (!iterationResult[iteration]) {\r\n        iterationResult[iteration] = []\r\n    }\r\n    if (checkDate(currentDate, i, config, verifiedField)) {\r\n        iterationResult[iteration].push(currentDate)\r\n    }\r\n    return iterationResult\r\n};\r\nvar checkDate = function(currentDate, i, config, verifiedField) {\r\n    if (!dateIsRecurrenceException(currentDate, config.exception)) {\r\n        var duration = dateUtils.sameDate(currentDate, config.recurrenceEndDate) && config.recurrenceEndDate.getTime() > currentDate.getTime() ? config.recurrenceEndDate.getTime() - currentDate.getTime() : config.duration;\r\n        if (currentDate.getTime() >= config.recurrenceStartDate.getTime() && currentDate.getTime() + duration > config.min.getTime()) {\r\n            return verifiedField || checkDateByRule(currentDate, [config.dateRules[i]], config.rule.wkst)\r\n        }\r\n    }\r\n    return false\r\n};\r\nvar filterDatesBySetPos = function(dates, bySetPos) {\r\n    var resultArray = [];\r\n    bySetPos.split(\",\").forEach(function(index) {\r\n        index = Number(index);\r\n        var dateIndex = index > 0 ? index - 1 : dates.length + index;\r\n        if (dates[dateIndex]) {\r\n            resultArray.push(dates[dateIndex])\r\n        }\r\n    });\r\n    return resultArray\r\n};\r\nvar correctDate = function(originalDate, date) {\r\n    if (originalDate.getDate() !== date) {\r\n        originalDate.setDate(date)\r\n    }\r\n};\r\nvar incrementDate = function(date, originalStartDate, rule, iterationStep) {\r\n    var initialDate = new Date(date);\r\n    var needCorrect = true;\r\n    date = dateUtils.addInterval(date, rule.interval);\r\n    if (\"DAILY\" === rule.freq && !isDefined(rule.byhour) && originalStartDate.getHours() !== date.getHours()) {\r\n        date = new Date(date.getTime() - (initialDate.getHours() - originalStartDate.getHours()) * toMs(\"hour\"))\r\n    }\r\n    if (\"MONTHLY\" === rule.freq && !rule.byday) {\r\n        var expectedDate = originalStartDate.getDate();\r\n        if (rule.bymonthday) {\r\n            expectedDate = Number(rule.bymonthday.split(\",\")[iterationStep]);\r\n            if (expectedDate < 0) {\r\n                initialDate.setMonth(initialDate.getMonth() + 1, 1);\r\n                dateSetterMap.bymonthday(initialDate, expectedDate);\r\n                date = initialDate;\r\n                needCorrect = false\r\n            }\r\n        }\r\n        needCorrect && correctDate(date, expectedDate)\r\n    }\r\n    if (\"YEARLY\" === rule.freq) {\r\n        if (rule.byyearday) {\r\n            var dayNumber = Number(rule.byyearday.split(\",\")[iterationStep]);\r\n            dateSetterMap.byyearday(date, dayNumber)\r\n        }\r\n        var dateRules = splitDateRules(rule);\r\n        for (var field in dateRules[iterationStep]) {\r\n            dateSetterMap[field] && dateSetterMap[field](date, dateRules[iterationStep][field], rule.wkst)\r\n        }\r\n    }\r\n    return date\r\n};\r\nvar getDatePartDiffs = function(date1, date2) {\r\n    return {\r\n        years: date1.getFullYear() - date2.getFullYear(),\r\n        months: date1.getMonth() - date2.getMonth(),\r\n        days: date1.getDate() - date2.getDate(),\r\n        hours: date1.getHours() - date2.getHours(),\r\n        minutes: date1.getMinutes() - date2.getMinutes(),\r\n        seconds: date1.getSeconds() - date2.getSeconds()\r\n    }\r\n};\r\nvar getRecurrenceRule = function(recurrence) {\r\n    var result = {\r\n        rule: {},\r\n        isValid: false\r\n    };\r\n    if (recurrence) {\r\n        result.rule = parseRecurrenceRule(recurrence);\r\n        result.isValid = validateRRule(result.rule, recurrence)\r\n    }\r\n    return result\r\n};\r\nvar loggedWarnings = [];\r\nvar validateRRule = function(rule, recurrence) {\r\n    if (brokenRuleNameExists(rule) || inArray(rule.freq, freqNames) === -1 || wrongCountRule(rule) || wrongIntervalRule(rule) || wrongDayOfWeek(rule) || wrongByMonthDayRule(rule) || wrongByMonth(rule) || wrongUntilRule(rule)) {\r\n        logBrokenRule(recurrence);\r\n        return false\r\n    }\r\n    return true\r\n};\r\nvar wrongUntilRule = function(rule) {\r\n    var wrongUntil = false;\r\n    var until = rule.until;\r\n    if (void 0 !== until && !(until instanceof Date)) {\r\n        wrongUntil = true\r\n    }\r\n    return wrongUntil\r\n};\r\nvar wrongCountRule = function(rule) {\r\n    var wrongCount = false;\r\n    var count = rule.count;\r\n    if (count && \"string\" === typeof count) {\r\n        wrongCount = true\r\n    }\r\n    return wrongCount\r\n};\r\nvar wrongByMonthDayRule = function(rule) {\r\n    var wrongByMonthDay = false;\r\n    var byMonthDay = rule.bymonthday;\r\n    if (byMonthDay && isNaN(parseInt(byMonthDay))) {\r\n        wrongByMonthDay = true\r\n    }\r\n    return wrongByMonthDay\r\n};\r\nvar wrongByMonth = function wrongByMonth(rule) {\r\n    var wrongByMonth = false;\r\n    var byMonth = rule.bymonth;\r\n    if (byMonth && isNaN(parseInt(byMonth))) {\r\n        wrongByMonth = true\r\n    }\r\n    return wrongByMonth\r\n};\r\nvar wrongIntervalRule = function(rule) {\r\n    var wrongInterval = false;\r\n    var interval = rule.interval;\r\n    if (interval && \"string\" === typeof interval) {\r\n        wrongInterval = true\r\n    }\r\n    return wrongInterval\r\n};\r\nvar wrongDayOfWeek = function(rule) {\r\n    var daysByRule = daysFromByDayRule(rule);\r\n    var brokenDaysExist = false;\r\n    each(daysByRule, function(_, day) {\r\n        if (!Object.prototype.hasOwnProperty.call(days, day)) {\r\n            brokenDaysExist = true;\r\n            return false\r\n        }\r\n    });\r\n    return brokenDaysExist\r\n};\r\nvar brokenRuleNameExists = function(rule) {\r\n    var brokenRuleExists = false;\r\n    each(rule, function(ruleName) {\r\n        if (inArray(ruleName, ruleNames) === -1) {\r\n            brokenRuleExists = true;\r\n            return false\r\n        }\r\n    });\r\n    return brokenRuleExists\r\n};\r\nvar logBrokenRule = function(recurrence) {\r\n    if (inArray(recurrence, loggedWarnings) === -1) {\r\n        errors.log(\"W0006\", recurrence);\r\n        loggedWarnings.push(recurrence)\r\n    }\r\n};\r\nvar parseRecurrenceRule = function(recurrence) {\r\n    var ruleObject = {};\r\n    var ruleParts = recurrence.split(\";\");\r\n    for (var i = 0, len = ruleParts.length; i < len; i++) {\r\n        var rule = ruleParts[i].split(\"=\");\r\n        var ruleName = rule[0].toLowerCase();\r\n        var ruleValue = rule[1];\r\n        ruleObject[ruleName] = ruleValue\r\n    }\r\n    var count = parseInt(ruleObject.count);\r\n    if (!isNaN(count)) {\r\n        ruleObject.count = count\r\n    }\r\n    if (ruleObject.interval) {\r\n        var interval = parseInt(ruleObject.interval);\r\n        if (!isNaN(interval)) {\r\n            ruleObject.interval = interval\r\n        }\r\n    } else {\r\n        ruleObject.interval = 1\r\n    }\r\n    if (ruleObject.freq && ruleObject.until) {\r\n        ruleObject.until = getDateByAsciiString(ruleObject.until)\r\n    }\r\n    return ruleObject\r\n};\r\nvar getDateByAsciiString = function(string, initialDate) {\r\n    if (\"string\" !== typeof string) {\r\n        return string\r\n    }\r\n    var arrayDate = string.match(/(\\d{4})(\\d{2})(\\d{2})(T(\\d{2})(\\d{2})(\\d{2}))?(Z)?/);\r\n    if (!arrayDate) {\r\n        return null\r\n    }\r\n    var isUTC = void 0 !== arrayDate[8];\r\n    var currentOffset = initialDate ? initialDate.getTimezoneOffset() : resultUtils.getTimeZoneOffset();\r\n    var date = new(Function.prototype.bind.apply(Date, prepareDateArrayToParse(arrayDate)));\r\n    currentOffset = 6e4 * currentOffset;\r\n    if (isUTC) {\r\n        date = new Date(date.getTime() - currentOffset)\r\n    }\r\n    return date\r\n};\r\nvar prepareDateArrayToParse = function(arrayDate) {\r\n    arrayDate.shift();\r\n    if (void 0 === arrayDate[3]) {\r\n        arrayDate.splice(3)\r\n    } else {\r\n        arrayDate.splice(3, 1);\r\n        arrayDate.splice(6)\r\n    }\r\n    arrayDate[1]--;\r\n    arrayDate.unshift(null);\r\n    return arrayDate\r\n};\r\nvar daysFromByDayRule = function(rule) {\r\n    var result = [];\r\n    if (rule.byday) {\r\n        if (Array.isArray(rule.byday)) {\r\n            result = rule.byday\r\n        } else {\r\n            result = rule.byday.split(\",\")\r\n        }\r\n    }\r\n    return result\r\n};\r\nvar getAsciiStringByDate = function(date) {\r\n    var currentOffset = 6e4 * resultUtils.getTimeZoneOffset();\r\n    date = new Date(date.getTime() + currentOffset);\r\n    return date.getFullYear() + (\"0\" + (date.getMonth() + 1)).slice(-2) + (\"0\" + date.getDate()).slice(-2) + \"T\" + (\"0\" + date.getHours()).slice(-2) + (\"0\" + date.getMinutes()).slice(-2) + (\"0\" + date.getSeconds()).slice(-2) + \"Z\"\r\n};\r\nvar splitDateRules = function(rule) {\r\n    var firstDayOfWeek = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null;\r\n    var result = [];\r\n    if (isDefined(firstDayOfWeek)) {\r\n        rule.fdow = firstDayOfWeek\r\n    }\r\n    if (!rule.wkst) {\r\n        rule.wkst = isDefined(firstDayOfWeek) ? daysNames[firstDayOfWeek] : \"MO\"\r\n    }\r\n    if (rule.byweekno && !rule.byday) {\r\n        var dayNames = Object.keys(days);\r\n        for (var i = 0; i < days[rule.wkst]; i++) {\r\n            dayNames.push(dayNames.shift())\r\n        }\r\n        rule.byday = dayNames.join(\",\")\r\n    }\r\n    for (var field in dateSetterMap) {\r\n        if (!rule[field]) {\r\n            continue\r\n        }\r\n        var ruleFieldValues = rule[field].split(\",\");\r\n        var ruleArray = getDateRuleArray(field, ruleFieldValues);\r\n        result = result.length ? extendObjectArray(ruleArray, result) : ruleArray\r\n    }\r\n    return result\r\n};\r\nvar getDateRuleArray = function(field, values) {\r\n    var result = [];\r\n    for (var i = 0, length = values.length; i < length; i++) {\r\n        var dateRule = {};\r\n        dateRule[field] = handleRuleFieldValue(field, values[i]);\r\n        result.push(dateRule)\r\n    }\r\n    return result\r\n};\r\nvar handleRuleFieldValue = function(field, value) {\r\n    var result = parseInt(value);\r\n    if (\"bymonth\" === field) {\r\n        result -= 1\r\n    }\r\n    if (\"byday\" === field) {\r\n        result = days[value]\r\n    }\r\n    return result\r\n};\r\nvar extendObjectArray = function(firstArray, secondArray) {\r\n    var result = [];\r\n    for (var i = 0, firstArrayLength = firstArray.length; i < firstArrayLength; i++) {\r\n        for (var j = 0, secondArrayLength = secondArray.length; j < secondArrayLength; j++) {\r\n            result.push(extend({}, firstArray[i], secondArray[j]))\r\n        }\r\n    }\r\n    return result\r\n};\r\nvar getDatesByRules = function(dateRules, startDate, rule) {\r\n    var result = [];\r\n    for (var i = 0, len = dateRules.length; i < len; i++) {\r\n        var current = dateRules[i];\r\n        var updatedDate = prepareDate(startDate, dateRules, rule.wkst);\r\n        for (var field in current) {\r\n            dateSetterMap[field] && dateSetterMap[field](updatedDate, current[field], rule.wkst, rule.freq, rule.fdow)\r\n        }\r\n        if (Array.isArray(updatedDate)) {\r\n            result = result.concat(updatedDate)\r\n        } else {\r\n            result.push(new Date(updatedDate))\r\n        }\r\n    }\r\n    if (!result.length) {\r\n        result.push(startDate)\r\n    }\r\n    return result\r\n};\r\nvar getDatesByCount = function(dateRules, startDate, recurrenceStartDate, rule) {\r\n    var result = [];\r\n    var count = rule.count;\r\n    var counter = 0;\r\n    var date = prepareDate(startDate, dateRules, rule.wkst);\r\n    while (counter < count) {\r\n        var dates = getDatesByRules(dateRules, date, rule);\r\n        var checkedDates = [];\r\n        for (var i = 0; i < dates.length; i++) {\r\n            if (dates[i].getTime() >= recurrenceStartDate.getTime()) {\r\n                checkedDates.push(dates[i])\r\n            }\r\n        }\r\n        var length = checkedDates.length;\r\n        counter += length;\r\n        var delCount = counter - count;\r\n        if (counter > count) {\r\n            checkedDates.splice(length - delCount, delCount)\r\n        }\r\n        for (i = 0; i < checkedDates.length; i++) {\r\n            result.push(checkedDates[i])\r\n        }\r\n        var interval = rule.interval;\r\n        if (\"days\" === Object.keys(interval)[0]) {\r\n            interval = {\r\n                weeks: 1\r\n            }\r\n        }\r\n        date = dateUtils.addInterval(date, interval)\r\n    }\r\n    return result\r\n};\r\nvar prepareDate = function(startDate, dateRules, weekStartRule) {\r\n    var date = new Date(startDate);\r\n    var day = date.getDay();\r\n    if (dateRules.length && isDefined(dateRules[0].byday)) {\r\n        date.setDate(date.getDate() - day + days[weekStartRule] - (day < days[weekStartRule] ? 7 : 0))\r\n    } else {\r\n        date.setDate(1)\r\n    }\r\n    return date\r\n};\r\nvar checkDateByRule = function(date, rules, weekStart) {\r\n    var result = false;\r\n    for (var i = 0; i < rules.length; i++) {\r\n        var current = rules[i];\r\n        var currentRuleResult = true;\r\n        for (var field in current) {\r\n            var processNegative = \"bymonthday\" === field && current[field] < 0;\r\n            if (dateGetterMap[field] && !processNegative && current[field] !== dateGetterMap[field](date, weekStart)) {\r\n                currentRuleResult = false\r\n            }\r\n        }\r\n        result = result || currentRuleResult\r\n    }\r\n    return result || !rules.length\r\n};\r\nvar getRecurrenceString = function(object) {\r\n    if (!object || !object.freq) {\r\n        return\r\n    }\r\n    var result = \"\";\r\n    for (var field in object) {\r\n        var value = object[field];\r\n        if (\"interval\" === field && value < 2) {\r\n            continue\r\n        }\r\n        if (\"until\" === field) {\r\n            value = getAsciiStringByDate(value)\r\n        }\r\n        result += field + \"=\" + value + \";\"\r\n    }\r\n    result = result.substring(0, result.length - 1);\r\n    return result.toUpperCase()\r\n};\r\nvar resultUtils = {\r\n    getRecurrenceString: getRecurrenceString,\r\n    getRecurrenceRule: getRecurrenceRule,\r\n    getAsciiStringByDate: getAsciiStringByDate,\r\n    getDatesByRecurrence: getDatesByRecurrence,\r\n    dateInRecurrenceRange: dateInRecurrenceRange,\r\n    getDateByAsciiString: getDateByAsciiString,\r\n    daysFromByDayRule: daysFromByDayRule,\r\n    getTimeZoneOffset: getTimeZoneOffset\r\n};\r\nmodule.exports = resultUtils;\r\n"]},"metadata":{},"sourceType":"script"}