{"ast":null,"code":"\"use strict\"; // Copyright 2018, Google, LLC.\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst extend = require(\"extend\");\n\nconst node_fetch_1 = require(\"node-fetch\");\n\nconst qs = require(\"querystring\");\n\nconst stream = require(\"stream\");\n\nconst url = require(\"url\");\n\nconst common_1 = require(\"./common\");\n\nconst isbrowser_1 = require(\"./isbrowser\");\n\nconst retry_1 = require(\"./retry\");\n\nconst URL = isbrowser_1.isBrowser() ? window.URL : url.URL;\nconst fetch = isbrowser_1.isBrowser() ? window.fetch : node_fetch_1.default; // tslint:disable-next-line variable-name no-any\n\nlet HttpsProxyAgent; // Figure out if we should be using a proxy. Only if it's required, load\n// the https-proxy-agent module as it adds startup cost.\n\nfunction loadProxy() {\n  const proxy = process.env.HTTPS_PROXY || process.env.https_proxy || process.env.HTTP_PROXY || process.env.http_proxy;\n\n  if (proxy) {\n    HttpsProxyAgent = require('https-proxy-agent');\n  }\n\n  return proxy;\n}\n\nloadProxy();\n\nclass Gaxios {\n  /**\n   * The Gaxios class is responsible for making HTTP requests.\n   * @param defaults The default set of options to be used for this instance.\n   */\n  constructor(defaults) {\n    this.agentCache = new Map();\n    this.defaults = defaults || {};\n  }\n  /**\n   * Perform an HTTP request with the given options.\n   * @param opts Set of HTTP options that will be used for this HTTP request.\n   */\n\n\n  request(opts = {}) {\n    return __awaiter(this, void 0, void 0, function* () {\n      opts = this.validateOpts(opts);\n\n      try {\n        let translatedResponse;\n\n        if (opts.adapter) {\n          translatedResponse = yield opts.adapter(opts);\n        } else {\n          const res = yield fetch(opts.url, opts);\n          const data = yield this.getResponseData(opts, res);\n          translatedResponse = this.translateResponse(opts, res, data);\n        }\n\n        if (!opts.validateStatus(translatedResponse.status)) {\n          throw new common_1.GaxiosError(`Request failed with status code ${translatedResponse.status}`, opts, translatedResponse);\n        }\n\n        return translatedResponse;\n      } catch (e) {\n        const err = e;\n        err.config = opts;\n        const {\n          shouldRetry,\n          config\n        } = yield retry_1.getRetryConfig(e);\n\n        if (shouldRetry && config) {\n          err.config.retryConfig.currentRetryAttempt = config.retryConfig.currentRetryAttempt;\n          return this.request(err.config);\n        }\n\n        throw err;\n      }\n    });\n  }\n\n  getResponseData(opts, res) {\n    return __awaiter(this, void 0, void 0, function* () {\n      switch (opts.responseType) {\n        case 'stream':\n          return res.body;\n\n        case 'json':\n          let data = yield res.text();\n\n          try {\n            data = JSON.parse(data);\n          } catch (e) {}\n\n          return data;\n\n        case 'arraybuffer':\n          return res.arrayBuffer();\n\n        case 'blob':\n          return res.blob();\n\n        default:\n          return res.text();\n      }\n    });\n  }\n  /**\n   * Validates the options, and merges them with defaults.\n   * @param opts The original options passed from the client.\n   */\n\n\n  validateOpts(options) {\n    const opts = extend(true, {}, this.defaults, options);\n\n    if (!opts.url) {\n      throw new Error('URL is required.');\n    } // baseUrl has been deprecated, remove in 2.0\n\n\n    const baseUrl = opts.baseUrl || opts.baseURL;\n\n    if (baseUrl) {\n      opts.url = baseUrl + opts.url;\n    }\n\n    const parsedUrl = new URL(opts.url);\n    opts.url = `${parsedUrl.origin}${parsedUrl.pathname}`;\n    opts.params = extend(qs.parse(parsedUrl.search.substr(1)), // removes leading ?\n    opts.params);\n    opts.paramsSerializer = opts.paramsSerializer || this.paramsSerializer;\n\n    if (opts.params) {\n      parsedUrl.search = opts.paramsSerializer(opts.params);\n    }\n\n    opts.url = parsedUrl.href;\n\n    if (typeof options.maxContentLength === 'number') {\n      opts.size = options.maxContentLength;\n    }\n\n    if (typeof options.maxRedirects === 'number') {\n      opts.follow = options.maxRedirects;\n    }\n\n    opts.headers = opts.headers || {};\n\n    if (opts.data) {\n      if (this.isReadableStream(opts.data)) {\n        opts.body = opts.data;\n      } else if (typeof opts.data === 'object') {\n        opts.body = JSON.stringify(opts.data);\n        opts.headers['Content-Type'] = 'application/json';\n      } else {\n        opts.body = opts.data;\n      }\n    }\n\n    opts.validateStatus = opts.validateStatus || this.validateStatus;\n    opts.responseType = opts.responseType || 'json';\n\n    if (!opts.headers['Accept'] && opts.responseType === 'json') {\n      opts.headers['Accept'] = 'application/json';\n    }\n\n    opts.method = opts.method || 'GET';\n    const proxy = loadProxy();\n\n    if (proxy) {\n      if (this.agentCache.has(proxy)) {\n        opts.agent = this.agentCache.get(proxy);\n      } else {\n        opts.agent = new HttpsProxyAgent(proxy);\n        this.agentCache.set(proxy, opts.agent);\n      }\n    }\n\n    return opts;\n  }\n  /**\n   * By default, throw for any non-2xx status code\n   * @param status status code from the HTTP response\n   */\n\n\n  validateStatus(status) {\n    return status >= 200 && status < 300;\n  }\n  /**\n   * Encode a set of key/value pars into a querystring format (?foo=bar&baz=boo)\n   * @param params key value pars to encode\n   */\n\n\n  paramsSerializer(params) {\n    return qs.stringify(params);\n  }\n\n  isReadableStream(obj) {\n    return obj instanceof stream.Readable && typeof obj._read === 'function';\n  }\n\n  translateResponse(opts, res, data) {\n    // headers need to be converted from a map to an obj\n    const headers = {};\n    res.headers.forEach((value, key) => {\n      headers[key] = value;\n    });\n    return {\n      config: opts,\n      data: data,\n      headers,\n      status: res.status,\n      statusText: res.statusText\n    };\n  }\n\n}\n\nexports.Gaxios = Gaxios;","map":{"version":3,"sources":["../../src/gaxios.ts"],"names":[],"mappings":"cAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,MAAA,MAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AAEA,MAAA,YAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AACA,MAAA,EAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AACA,MAAA,MAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AACA,MAAA,GAAA,GAAA,OAAA,CAAA,KAAA,CAAA;;AAEA,MAAA,QAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AACA,MAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AACA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAEA,MAAM,GAAG,GAAG,WAAA,CAAA,SAAA,KAAc,MAAM,CAAC,GAArB,GAA2B,GAAG,CAAC,GAA3C;AACA,MAAM,KAAK,GAAG,WAAA,CAAA,SAAA,KAAc,MAAM,CAAC,KAArB,GAA6B,YAAA,CAAA,OAA3C,C,CAEA;;AACA,IAAI,eAAJ,C,CAEA;AACA;;AACA,SAAS,SAAT,GAAkB;AAChB,QAAM,KAAK,GAAG,OAAO,CAAC,GAAR,CAAY,WAAZ,IAA2B,OAAO,CAAC,GAAR,CAAY,WAAvC,IACV,OAAO,CAAC,GAAR,CAAY,UADF,IACgB,OAAO,CAAC,GAAR,CAAY,UAD1C;;AAEA,MAAI,KAAJ,EAAW;AACT,IAAA,eAAe,GAAG,OAAO,CAAC,mBAAD,CAAzB;AACD;;AACD,SAAO,KAAP;AACD;;AACD,SAAS;;AAET,MAAa,MAAb,CAAmB;AAQjB;;;;AAIA,EAAA,WAAA,CAAY,QAAZ,EAAoC;AAX5B,SAAA,UAAA,GAAa,IAAI,GAAJ,EAAb;AAYN,SAAK,QAAL,GAAgB,QAAQ,IAAI,EAA5B;AACD;AAED;;;;;;AAIM,EAAA,OAAO,CAAU,IAAA,GAAsB,EAAhC,EAAkC;;AAC7C,MAAA,IAAI,GAAG,KAAK,YAAL,CAAkB,IAAlB,CAAP;;AACA,UAAI;AACF,YAAI,kBAAJ;;AACA,YAAI,IAAI,CAAC,OAAT,EAAkB;AAChB,UAAA,kBAAkB,GAAG,MAAM,IAAI,CAAC,OAAL,CAAgB,IAAhB,CAA3B;AACD,SAFD,MAEO;AACL,gBAAM,GAAG,GAAG,MAAM,KAAK,CAAC,IAAI,CAAC,GAAN,EAAY,IAAZ,CAAvB;AACA,gBAAM,IAAI,GAAG,MAAM,KAAK,eAAL,CAAqB,IAArB,EAA2B,GAA3B,CAAnB;AACA,UAAA,kBAAkB,GAAG,KAAK,iBAAL,CAA0B,IAA1B,EAAgC,GAAhC,EAAqC,IAArC,CAArB;AACD;;AACD,YAAI,CAAC,IAAI,CAAC,cAAL,CAAqB,kBAAkB,CAAC,MAAxC,CAAL,EAAsD;AACpD,gBAAM,IAAI,QAAA,CAAA,WAAJ,CACF,mCAAmC,kBAAkB,CAAC,MAAM,EAD1D,EAEF,IAFE,EAEI,kBAFJ,CAAN;AAGD;;AACD,eAAO,kBAAP;AACD,OAfD,CAeE,OAAO,CAAP,EAAU;AACV,cAAM,GAAG,GAAG,CAAZ;AACA,QAAA,GAAG,CAAC,MAAJ,GAAa,IAAb;AACA,cAAM;AAAC,UAAA,WAAD;AAAc,UAAA;AAAd,YAAwB,MAAM,OAAA,CAAA,cAAA,CAAe,CAAf,CAApC;;AACA,YAAI,WAAW,IAAI,MAAnB,EAA2B;AACzB,UAAA,GAAG,CAAC,MAAJ,CAAW,WAAX,CAAwB,mBAAxB,GACI,MAAM,CAAC,WAAP,CAAoB,mBADxB;AAEA,iBAAO,KAAK,OAAL,CAAgB,GAAG,CAAC,MAApB,CAAP;AACD;;AACD,cAAM,GAAN;AACD;AACF,K;AAAA;;AAEa,EAAA,eAAe,CACzB,IADyB,EACJ,GADI,EAC2B;;AACtD,cAAQ,IAAI,CAAC,YAAb;AACE,aAAK,QAAL;AACE,iBAAO,GAAG,CAAC,IAAX;;AACF,aAAK,MAAL;AACE,cAAI,IAAI,GAAG,MAAM,GAAG,CAAC,IAAJ,EAAjB;;AACA,cAAI;AACF,YAAA,IAAI,GAAG,IAAI,CAAC,KAAL,CAAW,IAAX,CAAP;AACD,WAFD,CAEE,OAAO,CAAP,EAAU,CACX;;AACD,iBAAO,IAAP;;AACF,aAAK,aAAL;AACE,iBAAO,GAAG,CAAC,WAAJ,EAAP;;AACF,aAAK,MAAL;AACE,iBAAO,GAAG,CAAC,IAAJ,EAAP;;AACF;AACE,iBAAO,GAAG,CAAC,IAAJ,EAAP;AAfJ;AAiBD,K;AAAA;AAED;;;;;;AAIQ,EAAA,YAAY,CAAC,OAAD,EAAuB;AACzC,UAAM,IAAI,GAAG,MAAM,CAAC,IAAD,EAAO,EAAP,EAAW,KAAK,QAAhB,EAA0B,OAA1B,CAAnB;;AACA,QAAI,CAAC,IAAI,CAAC,GAAV,EAAe;AACb,YAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AACD,KAJwC,CAMzC;;;AACA,UAAM,OAAO,GAAG,IAAI,CAAC,OAAL,IAAgB,IAAI,CAAC,OAArC;;AACA,QAAI,OAAJ,EAAa;AACX,MAAA,IAAI,CAAC,GAAL,GAAW,OAAO,GAAG,IAAI,CAAC,GAA1B;AACD;;AAED,UAAM,SAAS,GAAG,IAAI,GAAJ,CAAQ,IAAI,CAAC,GAAb,CAAlB;AACA,IAAA,IAAI,CAAC,GAAL,GAAW,GAAG,SAAS,CAAC,MAAM,GAAG,SAAS,CAAC,QAAQ,EAAnD;AACA,IAAA,IAAI,CAAC,MAAL,GAAc,MAAM,CAChB,EAAE,CAAC,KAAH,CAAS,SAAS,CAAC,MAAV,CAAiB,MAAjB,CAAwB,CAAxB,CAAT,CADgB,EACuB;AACvC,IAAA,IAAI,CAAC,MAFW,CAApB;AAIA,IAAA,IAAI,CAAC,gBAAL,GAAwB,IAAI,CAAC,gBAAL,IAAyB,KAAK,gBAAtD;;AACA,QAAI,IAAI,CAAC,MAAT,EAAiB;AACf,MAAA,SAAS,CAAC,MAAV,GAAmB,IAAI,CAAC,gBAAL,CAAsB,IAAI,CAAC,MAA3B,CAAnB;AACD;;AAED,IAAA,IAAI,CAAC,GAAL,GAAW,SAAS,CAAC,IAArB;;AAEA,QAAI,OAAO,OAAO,CAAC,gBAAf,KAAoC,QAAxC,EAAkD;AAChD,MAAA,IAAI,CAAC,IAAL,GAAY,OAAO,CAAC,gBAApB;AACD;;AAED,QAAI,OAAO,OAAO,CAAC,YAAf,KAAgC,QAApC,EAA8C;AAC5C,MAAA,IAAI,CAAC,MAAL,GAAc,OAAO,CAAC,YAAtB;AACD;;AAED,IAAA,IAAI,CAAC,OAAL,GAAe,IAAI,CAAC,OAAL,IAAgB,EAA/B;;AACA,QAAI,IAAI,CAAC,IAAT,EAAe;AACb,UAAI,KAAK,gBAAL,CAAsB,IAAI,CAAC,IAA3B,CAAJ,EAAsC;AACpC,QAAA,IAAI,CAAC,IAAL,GAAY,IAAI,CAAC,IAAjB;AACD,OAFD,MAEO,IAAI,OAAO,IAAI,CAAC,IAAZ,KAAqB,QAAzB,EAAmC;AACxC,QAAA,IAAI,CAAC,IAAL,GAAY,IAAI,CAAC,SAAL,CAAe,IAAI,CAAC,IAApB,CAAZ;AACA,QAAA,IAAI,CAAC,OAAL,CAAa,cAAb,IAA+B,kBAA/B;AACD,OAHM,MAGA;AACL,QAAA,IAAI,CAAC,IAAL,GAAY,IAAI,CAAC,IAAjB;AACD;AACF;;AAED,IAAA,IAAI,CAAC,cAAL,GAAsB,IAAI,CAAC,cAAL,IAAuB,KAAK,cAAlD;AACA,IAAA,IAAI,CAAC,YAAL,GAAoB,IAAI,CAAC,YAAL,IAAqB,MAAzC;;AACA,QAAI,CAAC,IAAI,CAAC,OAAL,CAAa,QAAb,CAAD,IAA2B,IAAI,CAAC,YAAL,KAAsB,MAArD,EAA6D;AAC3D,MAAA,IAAI,CAAC,OAAL,CAAa,QAAb,IAAyB,kBAAzB;AACD;;AACD,IAAA,IAAI,CAAC,MAAL,GAAc,IAAI,CAAC,MAAL,IAAe,KAA7B;AAEA,UAAM,KAAK,GAAG,SAAS,EAAvB;;AACA,QAAI,KAAJ,EAAW;AACT,UAAI,KAAK,UAAL,CAAgB,GAAhB,CAAoB,KAApB,CAAJ,EAAgC;AAC9B,QAAA,IAAI,CAAC,KAAL,GAAa,KAAK,UAAL,CAAgB,GAAhB,CAAoB,KAApB,CAAb;AACD,OAFD,MAEO;AACL,QAAA,IAAI,CAAC,KAAL,GAAa,IAAI,eAAJ,CAAoB,KAApB,CAAb;AACA,aAAK,UAAL,CAAgB,GAAhB,CAAoB,KAApB,EAA2B,IAAI,CAAC,KAAhC;AACD;AACF;;AAED,WAAO,IAAP;AACD;AAED;;;;;;AAIQ,EAAA,cAAc,CAAC,MAAD,EAAe;AACnC,WAAO,MAAM,IAAI,GAAV,IAAiB,MAAM,GAAG,GAAjC;AACD;AAED;;;;;;AAIQ,EAAA,gBAAgB,CAAC,MAAD,EAAyC;AAC/D,WAAO,EAAE,CAAC,SAAH,CAAa,MAAb,CAAP;AACD;;AAEO,EAAA,gBAAgB,CAAC,GAAD,EAAS;AAC/B,WAAO,GAAG,YAAY,MAAM,CAAC,QAAtB,IAAkC,OAAO,GAAG,CAAC,KAAX,KAAqB,UAA9D;AACD;;AAEO,EAAA,iBAAiB,CACrB,IADqB,EACA,GADA,EAErB,IAFqB,EAEb;AACV;AACA,UAAM,OAAO,GAAG,EAAhB;AACA,IAAA,GAAG,CAAC,OAAJ,CAAY,OAAZ,CAAoB,CAAC,KAAD,EAAQ,GAAR,KAAe;AACjC,MAAA,OAAO,CAAC,GAAD,CAAP,GAAe,KAAf;AACD,KAFD;AAIA,WAAO;AACL,MAAA,MAAM,EAAE,IADH;AAEL,MAAA,IAAI,EAAE,IAFD;AAGL,MAAA,OAHK;AAIL,MAAA,MAAM,EAAE,GAAG,CAAC,MAJP;AAKL,MAAA,UAAU,EAAE,GAAG,CAAC;AALX,KAAP;AAOD;;AAhLgB;;AAAnB,OAAA,CAAA,MAAA,GAAA,MAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright 2018, Google, LLC.\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst extend = require(\"extend\");\nconst node_fetch_1 = require(\"node-fetch\");\nconst qs = require(\"querystring\");\nconst stream = require(\"stream\");\nconst url = require(\"url\");\nconst common_1 = require(\"./common\");\nconst isbrowser_1 = require(\"./isbrowser\");\nconst retry_1 = require(\"./retry\");\nconst URL = isbrowser_1.isBrowser() ? window.URL : url.URL;\nconst fetch = isbrowser_1.isBrowser() ? window.fetch : node_fetch_1.default;\n// tslint:disable-next-line variable-name no-any\nlet HttpsProxyAgent;\n// Figure out if we should be using a proxy. Only if it's required, load\n// the https-proxy-agent module as it adds startup cost.\nfunction loadProxy() {\n    const proxy = process.env.HTTPS_PROXY || process.env.https_proxy ||\n        process.env.HTTP_PROXY || process.env.http_proxy;\n    if (proxy) {\n        HttpsProxyAgent = require('https-proxy-agent');\n    }\n    return proxy;\n}\nloadProxy();\nclass Gaxios {\n    /**\n     * The Gaxios class is responsible for making HTTP requests.\n     * @param defaults The default set of options to be used for this instance.\n     */\n    constructor(defaults) {\n        this.agentCache = new Map();\n        this.defaults = defaults || {};\n    }\n    /**\n     * Perform an HTTP request with the given options.\n     * @param opts Set of HTTP options that will be used for this HTTP request.\n     */\n    request(opts = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            opts = this.validateOpts(opts);\n            try {\n                let translatedResponse;\n                if (opts.adapter) {\n                    translatedResponse = yield opts.adapter(opts);\n                }\n                else {\n                    const res = yield fetch(opts.url, opts);\n                    const data = yield this.getResponseData(opts, res);\n                    translatedResponse = this.translateResponse(opts, res, data);\n                }\n                if (!opts.validateStatus(translatedResponse.status)) {\n                    throw new common_1.GaxiosError(`Request failed with status code ${translatedResponse.status}`, opts, translatedResponse);\n                }\n                return translatedResponse;\n            }\n            catch (e) {\n                const err = e;\n                err.config = opts;\n                const { shouldRetry, config } = yield retry_1.getRetryConfig(e);\n                if (shouldRetry && config) {\n                    err.config.retryConfig.currentRetryAttempt =\n                        config.retryConfig.currentRetryAttempt;\n                    return this.request(err.config);\n                }\n                throw err;\n            }\n        });\n    }\n    getResponseData(opts, res) {\n        return __awaiter(this, void 0, void 0, function* () {\n            switch (opts.responseType) {\n                case 'stream':\n                    return res.body;\n                case 'json':\n                    let data = yield res.text();\n                    try {\n                        data = JSON.parse(data);\n                    }\n                    catch (e) {\n                    }\n                    return data;\n                case 'arraybuffer':\n                    return res.arrayBuffer();\n                case 'blob':\n                    return res.blob();\n                default:\n                    return res.text();\n            }\n        });\n    }\n    /**\n     * Validates the options, and merges them with defaults.\n     * @param opts The original options passed from the client.\n     */\n    validateOpts(options) {\n        const opts = extend(true, {}, this.defaults, options);\n        if (!opts.url) {\n            throw new Error('URL is required.');\n        }\n        // baseUrl has been deprecated, remove in 2.0\n        const baseUrl = opts.baseUrl || opts.baseURL;\n        if (baseUrl) {\n            opts.url = baseUrl + opts.url;\n        }\n        const parsedUrl = new URL(opts.url);\n        opts.url = `${parsedUrl.origin}${parsedUrl.pathname}`;\n        opts.params = extend(qs.parse(parsedUrl.search.substr(1)), // removes leading ?\n        opts.params);\n        opts.paramsSerializer = opts.paramsSerializer || this.paramsSerializer;\n        if (opts.params) {\n            parsedUrl.search = opts.paramsSerializer(opts.params);\n        }\n        opts.url = parsedUrl.href;\n        if (typeof options.maxContentLength === 'number') {\n            opts.size = options.maxContentLength;\n        }\n        if (typeof options.maxRedirects === 'number') {\n            opts.follow = options.maxRedirects;\n        }\n        opts.headers = opts.headers || {};\n        if (opts.data) {\n            if (this.isReadableStream(opts.data)) {\n                opts.body = opts.data;\n            }\n            else if (typeof opts.data === 'object') {\n                opts.body = JSON.stringify(opts.data);\n                opts.headers['Content-Type'] = 'application/json';\n            }\n            else {\n                opts.body = opts.data;\n            }\n        }\n        opts.validateStatus = opts.validateStatus || this.validateStatus;\n        opts.responseType = opts.responseType || 'json';\n        if (!opts.headers['Accept'] && opts.responseType === 'json') {\n            opts.headers['Accept'] = 'application/json';\n        }\n        opts.method = opts.method || 'GET';\n        const proxy = loadProxy();\n        if (proxy) {\n            if (this.agentCache.has(proxy)) {\n                opts.agent = this.agentCache.get(proxy);\n            }\n            else {\n                opts.agent = new HttpsProxyAgent(proxy);\n                this.agentCache.set(proxy, opts.agent);\n            }\n        }\n        return opts;\n    }\n    /**\n     * By default, throw for any non-2xx status code\n     * @param status status code from the HTTP response\n     */\n    validateStatus(status) {\n        return status >= 200 && status < 300;\n    }\n    /**\n     * Encode a set of key/value pars into a querystring format (?foo=bar&baz=boo)\n     * @param params key value pars to encode\n     */\n    paramsSerializer(params) {\n        return qs.stringify(params);\n    }\n    isReadableStream(obj) {\n        return obj instanceof stream.Readable && typeof obj._read === 'function';\n    }\n    translateResponse(opts, res, data) {\n        // headers need to be converted from a map to an obj\n        const headers = {};\n        res.headers.forEach((value, key) => {\n            headers[key] = value;\n        });\n        return {\n            config: opts,\n            data: data,\n            headers,\n            status: res.status,\n            statusText: res.statusText\n        };\n    }\n}\nexports.Gaxios = Gaxios;\n//# sourceMappingURL=gaxios.js.map"]},"metadata":{},"sourceType":"script"}