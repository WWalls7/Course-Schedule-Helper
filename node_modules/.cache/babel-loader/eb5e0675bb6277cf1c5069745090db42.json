{"ast":null,"code":"/**\r\n * DevExtreme (ui/scheduler/workspaces/ui.scheduler.work_space.grouped.strategy.vertical.js)\r\n * Version: 19.2.6\r\n * Build date: Thu Jan 30 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar GroupedStrategy = require(\"./ui.scheduler.work_space.grouped.strategy\");\n\nvar VERTICAL_GROUPED_ATTR = \"dx-group-column-count\";\nvar DATE_HEADER_OFFSET = 10;\nvar WORK_SPACE_BORDER = 1;\nvar VerticalGroupedStrategy = GroupedStrategy.inherit({\n  prepareCellIndexes: function (cellCoordinates, groupIndex, inAllDayRow) {\n    var rowIndex = cellCoordinates.rowIndex + groupIndex * this._workSpace._getRowCount();\n\n    if (this._workSpace.supportAllDayRow() && this._workSpace.option(\"showAllDayPanel\")) {\n      rowIndex += groupIndex;\n\n      if (!inAllDayRow) {\n        rowIndex += 1;\n      }\n    }\n\n    return {\n      rowIndex: rowIndex,\n      cellIndex: cellCoordinates.cellIndex\n    };\n  },\n  calculateCellIndex: function (rowIndex, cellIndex) {\n    rowIndex %= this._workSpace._getRowCount();\n    return this._workSpace._getRowCount() * cellIndex + rowIndex;\n  },\n  getGroupIndex: function (rowIndex, cellIndex) {\n    return Math.floor(rowIndex / this._workSpace._getRowCount());\n  },\n  calculateHeaderCellRepeatCount: function () {\n    return 1;\n  },\n  insertAllDayRowsIntoDateTable: function () {\n    return this._workSpace.option(\"showAllDayPanel\");\n  },\n  getTotalCellCount: function (groupCount) {\n    return this._workSpace._getCellCount();\n  },\n  getTotalRowCount: function () {\n    return this._workSpace._getRowCount() * this._workSpace._getGroupCount();\n  },\n  addAdditionalGroupCellClasses: function (cellClass, index, i, j) {\n    cellClass = this._addLastGroupCellClass(cellClass, i + 1);\n    return this._addFirstGroupCellClass(cellClass, i + 1);\n  },\n  _addLastGroupCellClass: function (cellClass, index) {\n    if (index % this._workSpace._getRowCount() === 0) {\n      return cellClass + \" \" + this.getLastGroupCellClass();\n    }\n\n    return cellClass;\n  },\n  _addFirstGroupCellClass: function (cellClass, index) {\n    if ((index - 1) % this._workSpace._getRowCount() === 0) {\n      return cellClass + \" \" + this.getFirstGroupCellClass();\n    }\n\n    return cellClass;\n  },\n  getHorizontalMax: function (groupIndex) {\n    return this._workSpace.getMaxAllowedPosition()[0];\n  },\n  getVerticalMax: function (groupIndex) {\n    var maxAllowedPosition = this._workSpace.getMaxAllowedVerticalPosition()[groupIndex];\n\n    maxAllowedPosition += this._getOffsetByAllDayPanel(groupIndex);\n    return maxAllowedPosition;\n  },\n  _getOffsetByAllDayPanel: function (groupIndex) {\n    var result = 0;\n\n    if (this._workSpace.supportAllDayRow() && this._workSpace.option(\"showAllDayPanel\")) {\n      result = this._workSpace.getCellHeight() * (groupIndex + 1);\n    }\n\n    return result;\n  },\n  _getGroupTop: function (groupIndex) {\n    return this._workSpace.getMaxAllowedVerticalPosition()[groupIndex] - this._workSpace.getCellHeight() * this._workSpace._getRowCount();\n  },\n  calculateTimeCellRepeatCount: function () {\n    return this._workSpace._getGroupCount() || 1;\n  },\n  getWorkSpaceMinWidth: function () {\n    var minWidth = this._workSpace._getWorkSpaceWidth();\n\n    var workspaceContainerWidth = this._workSpace.$element().get(0).getBoundingClientRect().width - this._workSpace.getTimePanelWidth() - this._workSpace.getGroupTableWidth() - 2 * WORK_SPACE_BORDER;\n\n    if (minWidth < workspaceContainerWidth) {\n      minWidth = workspaceContainerWidth;\n    }\n\n    return minWidth;\n  },\n  getAllDayOffset: function () {\n    return 0;\n  },\n  getAllDayTableHeight: function () {\n    return 0;\n  },\n  getGroupCountAttr: function () {\n    return {\n      attr: VERTICAL_GROUPED_ATTR,\n      count: this._workSpace.option(\"groups\") && this._workSpace.option(\"groups\").length\n    };\n  },\n  getLeftOffset: function () {\n    return this._workSpace.getTimePanelWidth() + this._workSpace.getGroupTableWidth();\n  },\n  getGroupBoundsOffset: function (cellCount, $cells, cellWidth, coordinates) {\n    var groupIndex = coordinates.groupIndex;\n    var startOffset = $cells.eq(0).offset().left;\n    var endOffset = $cells.eq(cellCount - 1).offset().left + cellWidth;\n\n    var dayHeight = this._workSpace._calculateDayDuration() / this._workSpace.option(\"hoursInterval\") * this._workSpace.getCellHeight();\n\n    var scrollTop = this.getScrollableScrollTop();\n    var topOffset = groupIndex * dayHeight + this._workSpace._$thead.get(0).getBoundingClientRect().height + this._workSpace.invoke(\"getHeaderHeight\") + DATE_HEADER_OFFSET - scrollTop;\n\n    if (this._workSpace.option(\"showAllDayPanel\") && this._workSpace.supportAllDayRow()) {\n      topOffset += this._workSpace.getCellHeight() * (groupIndex + 1);\n    }\n\n    var bottomOffset = topOffset + dayHeight;\n    return {\n      left: startOffset,\n      right: endOffset,\n      top: topOffset,\n      bottom: bottomOffset\n    };\n  },\n  shiftIndicator: function ($indicator, height, rtlOffset, i) {\n    var offset = this._workSpace.getIndicatorOffset(0);\n\n    var tableOffset = this._workSpace.option(\"crossScrollingEnabled\") ? 0 : this._workSpace.getGroupTableWidth();\n    var horizontalOffset = rtlOffset ? rtlOffset - offset : offset;\n    var verticalOffset = this._workSpace._getRowCount() * this._workSpace.getCellHeight() * i;\n\n    if (this._workSpace.supportAllDayRow() && this._workSpace.option(\"showAllDayPanel\")) {\n      verticalOffset += this._workSpace.getAllDayHeight() * (i + 1);\n    }\n\n    $indicator.css(\"left\", horizontalOffset + tableOffset);\n    $indicator.css(\"top\", height + verticalOffset);\n  },\n  getShaderOffset: function (i, width) {\n    var offset = this._workSpace.option(\"crossScrollingEnabled\") ? 0 : this._workSpace.getGroupTableWidth();\n    return this._workSpace.option(\"rtlEnabled\") ? this._$container.get(0).getBoundingClientRect().width - offset - this._workSpace.getWorkSpaceLeftOffset() - width : offset;\n  },\n  getShaderTopOffset: function (i) {\n    return 0;\n  },\n  getShaderHeight: function () {\n    var height = this._workSpace.getIndicationHeight();\n\n    if (this._workSpace.supportAllDayRow() && this._workSpace.option(\"showAllDayPanel\")) {\n      height += this._workSpace.getCellHeight();\n    }\n\n    return height;\n  },\n  getShaderMaxHeight: function () {\n    var height = this._workSpace._getRowCount() * this._workSpace.getCellHeight();\n\n    if (this._workSpace.supportAllDayRow() && this._workSpace.option(\"showAllDayPanel\")) {\n      height += this._workSpace.getCellHeight();\n    }\n\n    return height;\n  },\n  getShaderWidth: function (i) {\n    return this._workSpace.getIndicationWidth(0);\n  },\n  getScrollableScrollTop: function (allDay) {\n    return this._workSpace.getScrollable().scrollTop();\n  }\n});\nmodule.exports = VerticalGroupedStrategy;","map":{"version":3,"sources":["C:/Users/Swizzle/Desktop/SE Project/Application/csh/node_modules/devextreme/ui/scheduler/workspaces/ui.scheduler.work_space.grouped.strategy.vertical.js"],"names":["GroupedStrategy","require","VERTICAL_GROUPED_ATTR","DATE_HEADER_OFFSET","WORK_SPACE_BORDER","VerticalGroupedStrategy","inherit","prepareCellIndexes","cellCoordinates","groupIndex","inAllDayRow","rowIndex","_workSpace","_getRowCount","supportAllDayRow","option","cellIndex","calculateCellIndex","getGroupIndex","Math","floor","calculateHeaderCellRepeatCount","insertAllDayRowsIntoDateTable","getTotalCellCount","groupCount","_getCellCount","getTotalRowCount","_getGroupCount","addAdditionalGroupCellClasses","cellClass","index","i","j","_addLastGroupCellClass","_addFirstGroupCellClass","getLastGroupCellClass","getFirstGroupCellClass","getHorizontalMax","getMaxAllowedPosition","getVerticalMax","maxAllowedPosition","getMaxAllowedVerticalPosition","_getOffsetByAllDayPanel","result","getCellHeight","_getGroupTop","calculateTimeCellRepeatCount","getWorkSpaceMinWidth","minWidth","_getWorkSpaceWidth","workspaceContainerWidth","$element","get","getBoundingClientRect","width","getTimePanelWidth","getGroupTableWidth","getAllDayOffset","getAllDayTableHeight","getGroupCountAttr","attr","count","length","getLeftOffset","getGroupBoundsOffset","cellCount","$cells","cellWidth","coordinates","startOffset","eq","offset","left","endOffset","dayHeight","_calculateDayDuration","scrollTop","getScrollableScrollTop","topOffset","_$thead","height","invoke","bottomOffset","right","top","bottom","shiftIndicator","$indicator","rtlOffset","getIndicatorOffset","tableOffset","horizontalOffset","verticalOffset","getAllDayHeight","css","getShaderOffset","_$container","getWorkSpaceLeftOffset","getShaderTopOffset","getShaderHeight","getIndicationHeight","getShaderMaxHeight","getShaderWidth","getIndicationWidth","allDay","getScrollable","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (ui/scheduler/workspaces/ui.scheduler.work_space.grouped.strategy.vertical.js)\r\n * Version: 19.2.6\r\n * Build date: Thu Jan 30 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar GroupedStrategy = require(\"./ui.scheduler.work_space.grouped.strategy\");\r\nvar VERTICAL_GROUPED_ATTR = \"dx-group-column-count\";\r\nvar DATE_HEADER_OFFSET = 10;\r\nvar WORK_SPACE_BORDER = 1;\r\nvar VerticalGroupedStrategy = GroupedStrategy.inherit({\r\n    prepareCellIndexes: function(cellCoordinates, groupIndex, inAllDayRow) {\r\n        var rowIndex = cellCoordinates.rowIndex + groupIndex * this._workSpace._getRowCount();\r\n        if (this._workSpace.supportAllDayRow() && this._workSpace.option(\"showAllDayPanel\")) {\r\n            rowIndex += groupIndex;\r\n            if (!inAllDayRow) {\r\n                rowIndex += 1\r\n            }\r\n        }\r\n        return {\r\n            rowIndex: rowIndex,\r\n            cellIndex: cellCoordinates.cellIndex\r\n        }\r\n    },\r\n    calculateCellIndex: function(rowIndex, cellIndex) {\r\n        rowIndex %= this._workSpace._getRowCount();\r\n        return this._workSpace._getRowCount() * cellIndex + rowIndex\r\n    },\r\n    getGroupIndex: function(rowIndex, cellIndex) {\r\n        return Math.floor(rowIndex / this._workSpace._getRowCount())\r\n    },\r\n    calculateHeaderCellRepeatCount: function() {\r\n        return 1\r\n    },\r\n    insertAllDayRowsIntoDateTable: function() {\r\n        return this._workSpace.option(\"showAllDayPanel\")\r\n    },\r\n    getTotalCellCount: function(groupCount) {\r\n        return this._workSpace._getCellCount()\r\n    },\r\n    getTotalRowCount: function() {\r\n        return this._workSpace._getRowCount() * this._workSpace._getGroupCount()\r\n    },\r\n    addAdditionalGroupCellClasses: function(cellClass, index, i, j) {\r\n        cellClass = this._addLastGroupCellClass(cellClass, i + 1);\r\n        return this._addFirstGroupCellClass(cellClass, i + 1)\r\n    },\r\n    _addLastGroupCellClass: function(cellClass, index) {\r\n        if (index % this._workSpace._getRowCount() === 0) {\r\n            return cellClass + \" \" + this.getLastGroupCellClass()\r\n        }\r\n        return cellClass\r\n    },\r\n    _addFirstGroupCellClass: function(cellClass, index) {\r\n        if ((index - 1) % this._workSpace._getRowCount() === 0) {\r\n            return cellClass + \" \" + this.getFirstGroupCellClass()\r\n        }\r\n        return cellClass\r\n    },\r\n    getHorizontalMax: function(groupIndex) {\r\n        return this._workSpace.getMaxAllowedPosition()[0]\r\n    },\r\n    getVerticalMax: function(groupIndex) {\r\n        var maxAllowedPosition = this._workSpace.getMaxAllowedVerticalPosition()[groupIndex];\r\n        maxAllowedPosition += this._getOffsetByAllDayPanel(groupIndex);\r\n        return maxAllowedPosition\r\n    },\r\n    _getOffsetByAllDayPanel: function(groupIndex) {\r\n        var result = 0;\r\n        if (this._workSpace.supportAllDayRow() && this._workSpace.option(\"showAllDayPanel\")) {\r\n            result = this._workSpace.getCellHeight() * (groupIndex + 1)\r\n        }\r\n        return result\r\n    },\r\n    _getGroupTop: function(groupIndex) {\r\n        return this._workSpace.getMaxAllowedVerticalPosition()[groupIndex] - this._workSpace.getCellHeight() * this._workSpace._getRowCount()\r\n    },\r\n    calculateTimeCellRepeatCount: function() {\r\n        return this._workSpace._getGroupCount() || 1\r\n    },\r\n    getWorkSpaceMinWidth: function() {\r\n        var minWidth = this._workSpace._getWorkSpaceWidth();\r\n        var workspaceContainerWidth = this._workSpace.$element().get(0).getBoundingClientRect().width - this._workSpace.getTimePanelWidth() - this._workSpace.getGroupTableWidth() - 2 * WORK_SPACE_BORDER;\r\n        if (minWidth < workspaceContainerWidth) {\r\n            minWidth = workspaceContainerWidth\r\n        }\r\n        return minWidth\r\n    },\r\n    getAllDayOffset: function() {\r\n        return 0\r\n    },\r\n    getAllDayTableHeight: function() {\r\n        return 0\r\n    },\r\n    getGroupCountAttr: function() {\r\n        return {\r\n            attr: VERTICAL_GROUPED_ATTR,\r\n            count: this._workSpace.option(\"groups\") && this._workSpace.option(\"groups\").length\r\n        }\r\n    },\r\n    getLeftOffset: function() {\r\n        return this._workSpace.getTimePanelWidth() + this._workSpace.getGroupTableWidth()\r\n    },\r\n    getGroupBoundsOffset: function(cellCount, $cells, cellWidth, coordinates) {\r\n        var groupIndex = coordinates.groupIndex;\r\n        var startOffset = $cells.eq(0).offset().left;\r\n        var endOffset = $cells.eq(cellCount - 1).offset().left + cellWidth;\r\n        var dayHeight = this._workSpace._calculateDayDuration() / this._workSpace.option(\"hoursInterval\") * this._workSpace.getCellHeight();\r\n        var scrollTop = this.getScrollableScrollTop();\r\n        var topOffset = groupIndex * dayHeight + this._workSpace._$thead.get(0).getBoundingClientRect().height + this._workSpace.invoke(\"getHeaderHeight\") + DATE_HEADER_OFFSET - scrollTop;\r\n        if (this._workSpace.option(\"showAllDayPanel\") && this._workSpace.supportAllDayRow()) {\r\n            topOffset += this._workSpace.getCellHeight() * (groupIndex + 1)\r\n        }\r\n        var bottomOffset = topOffset + dayHeight;\r\n        return {\r\n            left: startOffset,\r\n            right: endOffset,\r\n            top: topOffset,\r\n            bottom: bottomOffset\r\n        }\r\n    },\r\n    shiftIndicator: function($indicator, height, rtlOffset, i) {\r\n        var offset = this._workSpace.getIndicatorOffset(0);\r\n        var tableOffset = this._workSpace.option(\"crossScrollingEnabled\") ? 0 : this._workSpace.getGroupTableWidth();\r\n        var horizontalOffset = rtlOffset ? rtlOffset - offset : offset;\r\n        var verticalOffset = this._workSpace._getRowCount() * this._workSpace.getCellHeight() * i;\r\n        if (this._workSpace.supportAllDayRow() && this._workSpace.option(\"showAllDayPanel\")) {\r\n            verticalOffset += this._workSpace.getAllDayHeight() * (i + 1)\r\n        }\r\n        $indicator.css(\"left\", horizontalOffset + tableOffset);\r\n        $indicator.css(\"top\", height + verticalOffset)\r\n    },\r\n    getShaderOffset: function(i, width) {\r\n        var offset = this._workSpace.option(\"crossScrollingEnabled\") ? 0 : this._workSpace.getGroupTableWidth();\r\n        return this._workSpace.option(\"rtlEnabled\") ? this._$container.get(0).getBoundingClientRect().width - offset - this._workSpace.getWorkSpaceLeftOffset() - width : offset\r\n    },\r\n    getShaderTopOffset: function(i) {\r\n        return 0\r\n    },\r\n    getShaderHeight: function() {\r\n        var height = this._workSpace.getIndicationHeight();\r\n        if (this._workSpace.supportAllDayRow() && this._workSpace.option(\"showAllDayPanel\")) {\r\n            height += this._workSpace.getCellHeight()\r\n        }\r\n        return height\r\n    },\r\n    getShaderMaxHeight: function() {\r\n        var height = this._workSpace._getRowCount() * this._workSpace.getCellHeight();\r\n        if (this._workSpace.supportAllDayRow() && this._workSpace.option(\"showAllDayPanel\")) {\r\n            height += this._workSpace.getCellHeight()\r\n        }\r\n        return height\r\n    },\r\n    getShaderWidth: function(i) {\r\n        return this._workSpace.getIndicationWidth(0)\r\n    },\r\n    getScrollableScrollTop: function(allDay) {\r\n        return this._workSpace.getScrollable().scrollTop()\r\n    }\r\n});\r\nmodule.exports = VerticalGroupedStrategy;\r\n"]},"metadata":{},"sourceType":"script"}