{"ast":null,"code":"/**\r\n * DevExtreme (ui/scheduler/workspaces/ui.scheduler.timeline.js)\r\n * Version: 19.2.6\r\n * Build date: Thu Jan 30 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../../../core/renderer\");\n\nvar noop = require(\"../../../core/utils/common\").noop;\n\nvar extend = require(\"../../../core/utils/extend\").extend;\n\nvar registerComponent = require(\"../../../core/component_registrator\");\n\nvar SchedulerWorkSpace = require(\"./ui.scheduler.work_space.indicator\");\n\nvar dateUtils = require(\"../../../core/utils/date\");\n\nvar tableCreator = require(\"../ui.scheduler.table_creator\");\n\nvar HorizontalShader = require(\"../shaders/ui.scheduler.current_time_shader.horizontal\");\n\nvar TIMELINE_CLASS = \"dx-scheduler-timeline\";\nvar GROUP_TABLE_CLASS = \"dx-scheduler-group-table\";\nvar HORIZONTAL_GROUPED_WORKSPACE_CLASS = \"dx-scheduler-work-space-horizontal-grouped\";\nvar HEADER_PANEL_CELL_CLASS = \"dx-scheduler-header-panel-cell\";\nvar HEADER_PANEL_WEEK_CELL_CLASS = \"dx-scheduler-header-panel-week-cell\";\nvar HEADER_ROW_CLASS = \"dx-scheduler-header-row\";\nvar HORIZONTAL = \"horizontal\";\nvar DATE_TABLE_CELL_BORDER = 1;\nvar DATE_TABLE_HEADER_MARGIN = 10;\nvar toMs = dateUtils.dateToMilliseconds;\nvar SchedulerTimeline = SchedulerWorkSpace.inherit({\n  _init: function () {\n    this.callBase();\n    this.$element().addClass(TIMELINE_CLASS);\n    this._$sidebarTable = $(\"<div>\").addClass(GROUP_TABLE_CLASS);\n  },\n  _getCellFromNextRow: function (direction, isMultiSelection) {\n    if (!isMultiSelection) {\n      return this.callBase(direction, isMultiSelection);\n    }\n\n    return this._$focusedCell;\n  },\n  _getDefaultGroupStrategy: function () {\n    return \"vertical\";\n  },\n  _toggleGroupingDirectionClass: function () {\n    this.$element().toggleClass(HORIZONTAL_GROUPED_WORKSPACE_CLASS, this._isHorizontalGroupedWorkSpace());\n  },\n  _getDefaultOptions: function () {\n    return extend(this.callBase(), {\n      groupOrientation: \"vertical\"\n    });\n  },\n  _getRightCell: function () {\n    var $rightCell;\n    var $focusedCell = this._$focusedCell;\n\n    var rowCellCount = this._getCellCount();\n\n    var edgeCellIndex = this._isRTL() ? 0 : rowCellCount - 1;\n    var direction = this._isRTL() ? \"prev\" : \"next\";\n\n    if ($focusedCell.index() === edgeCellIndex) {\n      $rightCell = $focusedCell;\n    } else {\n      $rightCell = $focusedCell[direction]();\n      $rightCell = this._checkForViewBounds($rightCell);\n    }\n\n    return $rightCell;\n  },\n  _getLeftCell: function () {\n    var $leftCell;\n    var $focusedCell = this._$focusedCell;\n\n    var rowCellCount = this._getCellCount();\n\n    var edgeCellIndex = this._isRTL() ? rowCellCount - 1 : 0;\n    var direction = this._isRTL() ? \"next\" : \"prev\";\n\n    if ($focusedCell.index() === edgeCellIndex) {\n      $leftCell = $focusedCell;\n    } else {\n      $leftCell = $focusedCell[direction]();\n      $leftCell = this._checkForViewBounds($leftCell);\n    }\n\n    return $leftCell;\n  },\n  _getRowCount: function () {\n    return 1;\n  },\n  _getCellCount: function () {\n    return this._getCellCountInDay() * this.option(\"intervalCount\");\n  },\n  getGroupTableWidth: function () {\n    return this._$sidebarTable ? this._$sidebarTable.outerWidth() : 0;\n  },\n  _getTotalRowCount: function (groupCount) {\n    if (this._isHorizontalGroupedWorkSpace()) {\n      return this._getRowCount();\n    } else {\n      groupCount = groupCount || 1;\n      return this._getRowCount() * groupCount;\n    }\n  },\n  _getDateByIndex: function (index) {\n    var resultDate = new Date(this._firstViewDate);\n    var dayIndex = Math.floor(index / this._getCellCountInDay());\n    resultDate.setTime(this._firstViewDate.getTime() + this._calculateCellIndex(0, index) * this._getInterval() + dayIndex * this._getHiddenInterval());\n    return resultDate;\n  },\n  _getFormat: function () {\n    return \"shorttime\";\n  },\n  _needApplyLastGroupCellClass: function () {\n    return true;\n  },\n  _calculateHiddenInterval: function (rowIndex, cellIndex) {\n    var dayIndex = Math.floor(cellIndex / this._getCellCountInDay());\n    return dayIndex * this._getHiddenInterval();\n  },\n  _getMillisecondsOffset: function (rowIndex, cellIndex) {\n    cellIndex = this._calculateCellIndex(rowIndex, cellIndex);\n    return this._getInterval() * cellIndex + this._calculateHiddenInterval(rowIndex, cellIndex);\n  },\n  _createWorkSpaceElements: function () {\n    this._createWorkSpaceScrollableElements();\n  },\n  _getWorkSpaceHeight: function () {\n    if (this.option(\"crossScrollingEnabled\")) {\n      return this._$dateTable.get(0).getBoundingClientRect().height;\n    }\n\n    return this.$element().get(0).getBoundingClientRect().height;\n  },\n  _dateTableScrollableConfig: function () {\n    var headerScrollableOnScroll;\n    var config = this.callBase();\n    var timelineConfig = {\n      direction: HORIZONTAL,\n      onStart: function () {\n        if (this._headerScrollable) {\n          headerScrollableOnScroll = this._headerScrollable.option(\"onScroll\");\n\n          this._headerScrollable.option(\"onScroll\", void 0);\n        }\n      }.bind(this),\n      onScroll: function (e) {\n        this._headerScrollable && this._headerScrollable.scrollTo({\n          left: e.scrollOffset.left\n        });\n      }.bind(this),\n      onEnd: function (e) {\n        this._headerScrollable && this._headerScrollable.option(\"onScroll\", headerScrollableOnScroll);\n      }.bind(this)\n    };\n    return this.option(\"crossScrollingEnabled\") ? config : extend(config, timelineConfig);\n  },\n  _headerScrollableConfig: function () {\n    var config = this.callBase();\n    return extend(config, {\n      scrollByContent: true\n    });\n  },\n  _renderTimePanel: noop,\n  _renderAllDayPanel: noop,\n  _getTableAllDay: function () {\n    return false;\n  },\n  _getDateHeaderTemplate: function () {\n    return this.option(\"timeCellTemplate\");\n  },\n  _toggleAllDayVisibility: noop,\n  _changeAllDayVisibility: noop,\n  supportAllDayRow: function () {\n    return false;\n  },\n  _getGroupHeaderContainer: function () {\n    if (this._isHorizontalGroupedWorkSpace()) {\n      return this._$thead;\n    }\n\n    return this._$sidebarTable;\n  },\n  _insertAllDayRowsIntoDateTable: function () {\n    return false;\n  },\n  _createAllDayPanelElements: noop,\n  _renderDateHeader: function () {\n    var $headerRow = this.callBase();\n\n    if (this._needRenderWeekHeader()) {\n      var firstViewDate = new Date(this._firstViewDate);\n      var $cells = [];\n\n      var colspan = this._getCellCountInDay();\n\n      var cellTemplate = this.option(\"dateCellTemplate\");\n\n      for (var i = 0; i < this._getWeekDuration() * this.option(\"intervalCount\"); i++) {\n        var $th = $(\"<th>\");\n\n        var text = this._formatWeekdayAndDay(firstViewDate);\n\n        if (cellTemplate) {\n          var templateOptions = {\n            model: {\n              text: text,\n              date: new Date(firstViewDate)\n            },\n            container: $th,\n            index: i\n          };\n          cellTemplate.render(templateOptions);\n        } else {\n          $th.text(text);\n        }\n\n        $th.addClass(HEADER_PANEL_CELL_CLASS).addClass(HEADER_PANEL_WEEK_CELL_CLASS).attr(\"colSpan\", colspan);\n        $cells.push($th);\n\n        this._incrementDate(firstViewDate);\n      }\n\n      var $row = $(\"<tr>\").addClass(HEADER_ROW_CLASS).append($cells);\n      $headerRow.before($row);\n    }\n  },\n  _needRenderWeekHeader: function () {\n    return false;\n  },\n  _incrementDate: function (date) {\n    date.setDate(date.getDate() + 1);\n  },\n  _getWeekDuration: function () {\n    return 1;\n  },\n  _renderView: function () {\n    this._setFirstViewDate();\n\n    var groupCellTemplates = this._renderGroupHeader();\n\n    this._renderDateHeader();\n\n    this._renderAllDayPanel();\n\n    this._renderTimePanel();\n\n    this._renderDateTable();\n\n    this._shader = new HorizontalShader();\n\n    this._updateGroupTableHeight();\n\n    this._$sidebarTable.appendTo(this._sidebarScrollable.$content());\n\n    this._applyCellTemplates(groupCellTemplates);\n  },\n  _setHorizontalGroupHeaderCellsHeight: noop,\n  getIndicationWidth: function () {\n    var today = this._getToday();\n\n    var cellWidth = this.getCellWidth();\n\n    var date = this._getIndicationFirstViewDate();\n\n    var hiddenInterval = this._getHiddenInterval();\n\n    var timeDiff = today.getTime() - date.getTime();\n    var differenceInDays = Math.ceil(timeDiff / toMs(\"day\")) - 1;\n    var duration = timeDiff - differenceInDays * hiddenInterval;\n    var cellCount = duration / this.getCellDuration();\n    return cellCount * cellWidth;\n  },\n  _renderIndicator: function (height, rtlOffset, $container, groupCount) {\n    var $indicator;\n    var width = this.getIndicationWidth();\n\n    if (\"vertical\" === this.option(\"groupOrientation\")) {\n      $indicator = this._createIndicator($container);\n      $indicator.height($container.get(0).getBoundingClientRect().height);\n      $indicator.css(\"left\", rtlOffset ? rtlOffset - width : width);\n    } else {\n      for (var i = 0; i < groupCount; i++) {\n        var offset = this._getCellCount() * this.getCellWidth() * i;\n        $indicator = this._createIndicator($container);\n        $indicator.height($container.get(0).getBoundingClientRect().height);\n        $indicator.css(\"left\", rtlOffset ? rtlOffset - width - offset : width + offset);\n      }\n    }\n  },\n  _isVerticalShader: function () {\n    return false;\n  },\n  _isCurrentTimeHeaderCell: function (headerIndex) {\n    var result = false;\n\n    if (this.option(\"showCurrentTimeIndicator\") && this._needRenderDateTimeIndicator()) {\n      var date = this._getDateByIndex(headerIndex);\n\n      var now = this._getToday();\n\n      date = new Date(date);\n\n      if (dateUtils.sameDate(now, date)) {\n        var startCellDate = new Date(date);\n        var endCellDate = new Date(date);\n        endCellDate = endCellDate.setMilliseconds(date.getMilliseconds() + this.getCellDuration());\n        result = dateUtils.dateInRange(now, startCellDate, endCellDate);\n      }\n    }\n\n    return result;\n  },\n  _cleanView: function () {\n    this.callBase();\n\n    this._$sidebarTable.empty();\n  },\n  _visibilityChanged: function (visible) {\n    this.callBase(visible);\n  },\n  _setTableSizes: function () {\n    var cellHeight = this.getCellHeight();\n\n    var minHeight = this._getWorkSpaceMinHeight();\n\n    var $groupCells = this._$sidebarTable.find(\"tr\");\n\n    var height = cellHeight * $groupCells.length;\n\n    if (height < minHeight) {\n      height = minHeight;\n    }\n\n    this._$sidebarTable.height(height);\n\n    this._$dateTable.height(height);\n\n    this.callBase();\n  },\n  _getWorkSpaceMinHeight: function () {\n    var minHeight = this._getWorkSpaceHeight();\n\n    var workspaceContainerHeight = this.$element().outerHeight(true) - this.getHeaderPanelHeight() - 2 * DATE_TABLE_CELL_BORDER - DATE_TABLE_HEADER_MARGIN;\n\n    if (minHeight < workspaceContainerHeight) {\n      minHeight = workspaceContainerHeight;\n    }\n\n    return minHeight;\n  },\n  _makeGroupRows: function (groups, groupByDate) {\n    var tableCreatorStrategy = \"vertical\" === this.option(\"groupOrientation\") ? tableCreator.VERTICAL : tableCreator.HORIZONTAL;\n    return tableCreator.makeGroupedTable(tableCreatorStrategy, groups, {\n      groupRowClass: this._getGroupRowClass(),\n      groupHeaderRowClass: this._getGroupRowClass(),\n      groupHeaderClass: this._getGroupHeaderClass.bind(this),\n      groupHeaderContentClass: this._getGroupHeaderContentClass()\n    }, this._getCellCount() || 1, this.option(\"resourceCellTemplate\"), this._getTotalRowCount(this._getGroupCount()), groupByDate);\n  },\n  _ensureGroupHeaderCellsHeight: function (cellHeight) {\n    var minCellHeight = this._calculateMinCellHeight();\n\n    if (cellHeight < minCellHeight) {\n      return minCellHeight;\n    }\n\n    return cellHeight;\n  },\n  _calculateMinCellHeight: function () {\n    var dateTable = this._getDateTable();\n\n    var dateTableRowSelector = \".\" + this._getDateTableRowClass();\n\n    return dateTable.get(0).getBoundingClientRect().height / dateTable.find(dateTableRowSelector).length - 2 * DATE_TABLE_CELL_BORDER;\n  },\n  _getCellCoordinatesByIndex: function (index) {\n    return {\n      cellIndex: index % this._getCellCount(),\n      rowIndex: 0\n    };\n  },\n  _getCellByCoordinates: function (cellCoordinates, groupIndex) {\n    var indexes = this._groupedStrategy.prepareCellIndexes(cellCoordinates, groupIndex);\n\n    return this._$dateTable.find(\"tr\").eq(indexes.rowIndex).find(\"td\").eq(indexes.cellIndex);\n  },\n  _getWorkSpaceWidth: function () {\n    return this._$dateTable.outerWidth(true);\n  },\n  _getGroupIndexByCell: function ($cell) {\n    return $cell.parent().index();\n  },\n  _getIndicationFirstViewDate: function () {\n    return new Date(this._firstViewDate);\n  },\n  _getIntervalBetween: function (currentDate, allDay) {\n    var startDayHour = this.option(\"startDayHour\");\n    var endDayHour = this.option(\"endDayHour\");\n    var firstViewDate = this.getStartViewDate();\n    var firstViewDateTime = firstViewDate.getTime();\n    var hiddenInterval = (24 - endDayHour + startDayHour) * toMs(\"hour\");\n    var timeZoneOffset = dateUtils.getTimezonesDifference(firstViewDate, currentDate);\n    var apptStart = currentDate.getTime();\n    var fullInterval = apptStart - firstViewDateTime - timeZoneOffset;\n    var fullDays = Math.floor(fullInterval / toMs(\"day\"));\n    var tailDuration = fullInterval - fullDays * toMs(\"day\");\n    var tailDelta = 0;\n\n    var cellCount = this._getCellCountInDay() * (fullDays - this._getWeekendsCount(fullDays));\n\n    var gapBeforeAppt = apptStart - dateUtils.trimTime(new Date(currentDate)).getTime();\n    var result = cellCount * this.option(\"hoursInterval\") * toMs(\"hour\");\n\n    if (!allDay) {\n      if (currentDate.getHours() < startDayHour) {\n        tailDelta = tailDuration - hiddenInterval + gapBeforeAppt;\n      } else {\n        if (currentDate.getHours() >= startDayHour && currentDate.getHours() < endDayHour) {\n          tailDelta = tailDuration;\n        } else {\n          if (currentDate.getHours() >= startDayHour && currentDate.getHours() >= endDayHour) {\n            tailDelta = tailDuration - (gapBeforeAppt - endDayHour * toMs(\"hour\"));\n          } else {\n            if (!fullDays) {\n              result = fullInterval;\n            }\n          }\n        }\n      }\n\n      result += tailDelta;\n    }\n\n    return result;\n  },\n  _getWeekendsCount: function () {\n    return 0;\n  },\n  getAllDayContainer: function () {\n    return null;\n  },\n  getTimePanelWidth: function () {\n    return 0;\n  },\n  getPositionShift: function (timeShift) {\n    var positionShift = this.callBase(timeShift);\n    var left = this.getCellWidth() * timeShift;\n\n    if (this.option(\"rtlEnabled\")) {\n      left *= -1;\n    }\n\n    left += positionShift.left;\n    return {\n      top: 0,\n      left: left,\n      cellPosition: left\n    };\n  },\n  getVisibleBounds: function () {\n    var isRtl = this.option(\"rtlEnabled\");\n    var result = {};\n    var $scrollable = this.getScrollable().$element();\n    var cellWidth = this.getCellWidth();\n    var scrollableOffset = isRtl ? this.getScrollableOuterWidth() - this.getScrollableScrollLeft() : this.getScrollableScrollLeft();\n    var scrolledCellCount = scrollableOffset / cellWidth;\n    var visibleCellCount = $scrollable.width() / cellWidth;\n    var totalCellCount = isRtl ? scrolledCellCount - visibleCellCount : scrolledCellCount + visibleCellCount;\n\n    var leftDate = this._getDateByIndex(scrolledCellCount);\n\n    var rightDate = this._getDateByIndex(totalCellCount);\n\n    if (isRtl) {\n      leftDate = this._getDateByIndex(totalCellCount);\n      rightDate = this._getDateByIndex(scrolledCellCount);\n    }\n\n    result.left = {\n      hours: leftDate.getHours(),\n      minutes: leftDate.getMinutes() >= 30 ? 30 : 0,\n      date: dateUtils.trimTime(leftDate)\n    };\n    result.right = {\n      hours: rightDate.getHours(),\n      minutes: rightDate.getMinutes() >= 30 ? 30 : 0,\n      date: dateUtils.trimTime(rightDate)\n    };\n    return result;\n  },\n  needUpdateScrollPosition: function (hours, minutes, bounds, date) {\n    var isUpdateNeeded = false;\n    isUpdateNeeded = this._dateWithinBounds(bounds, date);\n\n    if (hours < bounds.left.hours || hours > bounds.right.hours) {\n      isUpdateNeeded = true;\n    }\n\n    if (hours === bounds.left.hours && minutes < bounds.left.minutes) {\n      isUpdateNeeded = true;\n    }\n\n    if (hours === bounds.right.hours && minutes > bounds.right.minutes) {\n      isUpdateNeeded = true;\n    }\n\n    return isUpdateNeeded;\n  },\n  getIntervalDuration: function (allDay) {\n    return this.getCellDuration();\n  },\n  _dateWithinBounds: function (bounds, date) {\n    var trimmedDate = dateUtils.trimTime(new Date(date));\n    var isUpdateNeeded = false;\n\n    if (trimmedDate < bounds.left.date || trimmedDate > bounds.right.date) {\n      isUpdateNeeded = true;\n    }\n\n    return isUpdateNeeded;\n  },\n  _supportCompactDropDownAppointments: function () {\n    return false;\n  },\n  getCellMinWidth: function () {\n    return 0;\n  },\n  getWorkSpaceLeftOffset: function () {\n    return 0;\n  },\n  scrollToTime: function (hours, minutes, date) {\n    var coordinates = this._getScrollCoordinates(hours, minutes, date);\n\n    var scrollable = this.getScrollable();\n    var offset = this.option(\"rtlEnabled\") ? this.getScrollableContainer().get(0).getBoundingClientRect().width : 0;\n\n    if (this.option(\"templatesRenderAsynchronously\")) {\n      setTimeout(function () {\n        scrollable.scrollBy({\n          left: coordinates.left - scrollable.scrollLeft() - offset,\n          top: 0\n        });\n      });\n    } else {\n      scrollable.scrollBy({\n        left: coordinates.left - scrollable.scrollLeft() - offset,\n        top: 0\n      });\n    }\n  }\n});\nregisterComponent(\"dxSchedulerTimeline\", SchedulerTimeline);\nmodule.exports = SchedulerTimeline;","map":{"version":3,"sources":["C:/Users/Swizzle/Desktop/SE Project/Application/csh/node_modules/devextreme/ui/scheduler/workspaces/ui.scheduler.timeline.js"],"names":["$","require","noop","extend","registerComponent","SchedulerWorkSpace","dateUtils","tableCreator","HorizontalShader","TIMELINE_CLASS","GROUP_TABLE_CLASS","HORIZONTAL_GROUPED_WORKSPACE_CLASS","HEADER_PANEL_CELL_CLASS","HEADER_PANEL_WEEK_CELL_CLASS","HEADER_ROW_CLASS","HORIZONTAL","DATE_TABLE_CELL_BORDER","DATE_TABLE_HEADER_MARGIN","toMs","dateToMilliseconds","SchedulerTimeline","inherit","_init","callBase","$element","addClass","_$sidebarTable","_getCellFromNextRow","direction","isMultiSelection","_$focusedCell","_getDefaultGroupStrategy","_toggleGroupingDirectionClass","toggleClass","_isHorizontalGroupedWorkSpace","_getDefaultOptions","groupOrientation","_getRightCell","$rightCell","$focusedCell","rowCellCount","_getCellCount","edgeCellIndex","_isRTL","index","_checkForViewBounds","_getLeftCell","$leftCell","_getRowCount","_getCellCountInDay","option","getGroupTableWidth","outerWidth","_getTotalRowCount","groupCount","_getDateByIndex","resultDate","Date","_firstViewDate","dayIndex","Math","floor","setTime","getTime","_calculateCellIndex","_getInterval","_getHiddenInterval","_getFormat","_needApplyLastGroupCellClass","_calculateHiddenInterval","rowIndex","cellIndex","_getMillisecondsOffset","_createWorkSpaceElements","_createWorkSpaceScrollableElements","_getWorkSpaceHeight","_$dateTable","get","getBoundingClientRect","height","_dateTableScrollableConfig","headerScrollableOnScroll","config","timelineConfig","onStart","_headerScrollable","bind","onScroll","e","scrollTo","left","scrollOffset","onEnd","_headerScrollableConfig","scrollByContent","_renderTimePanel","_renderAllDayPanel","_getTableAllDay","_getDateHeaderTemplate","_toggleAllDayVisibility","_changeAllDayVisibility","supportAllDayRow","_getGroupHeaderContainer","_$thead","_insertAllDayRowsIntoDateTable","_createAllDayPanelElements","_renderDateHeader","$headerRow","_needRenderWeekHeader","firstViewDate","$cells","colspan","cellTemplate","i","_getWeekDuration","$th","text","_formatWeekdayAndDay","templateOptions","model","date","container","render","attr","push","_incrementDate","$row","append","before","setDate","getDate","_renderView","_setFirstViewDate","groupCellTemplates","_renderGroupHeader","_renderDateTable","_shader","_updateGroupTableHeight","appendTo","_sidebarScrollable","$content","_applyCellTemplates","_setHorizontalGroupHeaderCellsHeight","getIndicationWidth","today","_getToday","cellWidth","getCellWidth","_getIndicationFirstViewDate","hiddenInterval","timeDiff","differenceInDays","ceil","duration","cellCount","getCellDuration","_renderIndicator","rtlOffset","$container","$indicator","width","_createIndicator","css","offset","_isVerticalShader","_isCurrentTimeHeaderCell","headerIndex","result","_needRenderDateTimeIndicator","now","sameDate","startCellDate","endCellDate","setMilliseconds","getMilliseconds","dateInRange","_cleanView","empty","_visibilityChanged","visible","_setTableSizes","cellHeight","getCellHeight","minHeight","_getWorkSpaceMinHeight","$groupCells","find","length","workspaceContainerHeight","outerHeight","getHeaderPanelHeight","_makeGroupRows","groups","groupByDate","tableCreatorStrategy","VERTICAL","makeGroupedTable","groupRowClass","_getGroupRowClass","groupHeaderRowClass","groupHeaderClass","_getGroupHeaderClass","groupHeaderContentClass","_getGroupHeaderContentClass","_getGroupCount","_ensureGroupHeaderCellsHeight","minCellHeight","_calculateMinCellHeight","dateTable","_getDateTable","dateTableRowSelector","_getDateTableRowClass","_getCellCoordinatesByIndex","_getCellByCoordinates","cellCoordinates","groupIndex","indexes","_groupedStrategy","prepareCellIndexes","eq","_getWorkSpaceWidth","_getGroupIndexByCell","$cell","parent","_getIntervalBetween","currentDate","allDay","startDayHour","endDayHour","getStartViewDate","firstViewDateTime","timeZoneOffset","getTimezonesDifference","apptStart","fullInterval","fullDays","tailDuration","tailDelta","_getWeekendsCount","gapBeforeAppt","trimTime","getHours","getAllDayContainer","getTimePanelWidth","getPositionShift","timeShift","positionShift","top","cellPosition","getVisibleBounds","isRtl","$scrollable","getScrollable","scrollableOffset","getScrollableOuterWidth","getScrollableScrollLeft","scrolledCellCount","visibleCellCount","totalCellCount","leftDate","rightDate","hours","minutes","getMinutes","right","needUpdateScrollPosition","bounds","isUpdateNeeded","_dateWithinBounds","getIntervalDuration","trimmedDate","_supportCompactDropDownAppointments","getCellMinWidth","getWorkSpaceLeftOffset","scrollToTime","coordinates","_getScrollCoordinates","scrollable","getScrollableContainer","setTimeout","scrollBy","scrollLeft","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (ui/scheduler/workspaces/ui.scheduler.timeline.js)\r\n * Version: 19.2.6\r\n * Build date: Thu Jan 30 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar $ = require(\"../../../core/renderer\");\r\nvar noop = require(\"../../../core/utils/common\").noop;\r\nvar extend = require(\"../../../core/utils/extend\").extend;\r\nvar registerComponent = require(\"../../../core/component_registrator\");\r\nvar SchedulerWorkSpace = require(\"./ui.scheduler.work_space.indicator\");\r\nvar dateUtils = require(\"../../../core/utils/date\");\r\nvar tableCreator = require(\"../ui.scheduler.table_creator\");\r\nvar HorizontalShader = require(\"../shaders/ui.scheduler.current_time_shader.horizontal\");\r\nvar TIMELINE_CLASS = \"dx-scheduler-timeline\";\r\nvar GROUP_TABLE_CLASS = \"dx-scheduler-group-table\";\r\nvar HORIZONTAL_GROUPED_WORKSPACE_CLASS = \"dx-scheduler-work-space-horizontal-grouped\";\r\nvar HEADER_PANEL_CELL_CLASS = \"dx-scheduler-header-panel-cell\";\r\nvar HEADER_PANEL_WEEK_CELL_CLASS = \"dx-scheduler-header-panel-week-cell\";\r\nvar HEADER_ROW_CLASS = \"dx-scheduler-header-row\";\r\nvar HORIZONTAL = \"horizontal\";\r\nvar DATE_TABLE_CELL_BORDER = 1;\r\nvar DATE_TABLE_HEADER_MARGIN = 10;\r\nvar toMs = dateUtils.dateToMilliseconds;\r\nvar SchedulerTimeline = SchedulerWorkSpace.inherit({\r\n    _init: function() {\r\n        this.callBase();\r\n        this.$element().addClass(TIMELINE_CLASS);\r\n        this._$sidebarTable = $(\"<div>\").addClass(GROUP_TABLE_CLASS)\r\n    },\r\n    _getCellFromNextRow: function(direction, isMultiSelection) {\r\n        if (!isMultiSelection) {\r\n            return this.callBase(direction, isMultiSelection)\r\n        }\r\n        return this._$focusedCell\r\n    },\r\n    _getDefaultGroupStrategy: function() {\r\n        return \"vertical\"\r\n    },\r\n    _toggleGroupingDirectionClass: function() {\r\n        this.$element().toggleClass(HORIZONTAL_GROUPED_WORKSPACE_CLASS, this._isHorizontalGroupedWorkSpace())\r\n    },\r\n    _getDefaultOptions: function() {\r\n        return extend(this.callBase(), {\r\n            groupOrientation: \"vertical\"\r\n        })\r\n    },\r\n    _getRightCell: function() {\r\n        var $rightCell;\r\n        var $focusedCell = this._$focusedCell;\r\n        var rowCellCount = this._getCellCount();\r\n        var edgeCellIndex = this._isRTL() ? 0 : rowCellCount - 1;\r\n        var direction = this._isRTL() ? \"prev\" : \"next\";\r\n        if ($focusedCell.index() === edgeCellIndex) {\r\n            $rightCell = $focusedCell\r\n        } else {\r\n            $rightCell = $focusedCell[direction]();\r\n            $rightCell = this._checkForViewBounds($rightCell)\r\n        }\r\n        return $rightCell\r\n    },\r\n    _getLeftCell: function() {\r\n        var $leftCell;\r\n        var $focusedCell = this._$focusedCell;\r\n        var rowCellCount = this._getCellCount();\r\n        var edgeCellIndex = this._isRTL() ? rowCellCount - 1 : 0;\r\n        var direction = this._isRTL() ? \"next\" : \"prev\";\r\n        if ($focusedCell.index() === edgeCellIndex) {\r\n            $leftCell = $focusedCell\r\n        } else {\r\n            $leftCell = $focusedCell[direction]();\r\n            $leftCell = this._checkForViewBounds($leftCell)\r\n        }\r\n        return $leftCell\r\n    },\r\n    _getRowCount: function() {\r\n        return 1\r\n    },\r\n    _getCellCount: function() {\r\n        return this._getCellCountInDay() * this.option(\"intervalCount\")\r\n    },\r\n    getGroupTableWidth: function() {\r\n        return this._$sidebarTable ? this._$sidebarTable.outerWidth() : 0\r\n    },\r\n    _getTotalRowCount: function(groupCount) {\r\n        if (this._isHorizontalGroupedWorkSpace()) {\r\n            return this._getRowCount()\r\n        } else {\r\n            groupCount = groupCount || 1;\r\n            return this._getRowCount() * groupCount\r\n        }\r\n    },\r\n    _getDateByIndex: function(index) {\r\n        var resultDate = new Date(this._firstViewDate);\r\n        var dayIndex = Math.floor(index / this._getCellCountInDay());\r\n        resultDate.setTime(this._firstViewDate.getTime() + this._calculateCellIndex(0, index) * this._getInterval() + dayIndex * this._getHiddenInterval());\r\n        return resultDate\r\n    },\r\n    _getFormat: function() {\r\n        return \"shorttime\"\r\n    },\r\n    _needApplyLastGroupCellClass: function() {\r\n        return true\r\n    },\r\n    _calculateHiddenInterval: function(rowIndex, cellIndex) {\r\n        var dayIndex = Math.floor(cellIndex / this._getCellCountInDay());\r\n        return dayIndex * this._getHiddenInterval()\r\n    },\r\n    _getMillisecondsOffset: function(rowIndex, cellIndex) {\r\n        cellIndex = this._calculateCellIndex(rowIndex, cellIndex);\r\n        return this._getInterval() * cellIndex + this._calculateHiddenInterval(rowIndex, cellIndex)\r\n    },\r\n    _createWorkSpaceElements: function() {\r\n        this._createWorkSpaceScrollableElements()\r\n    },\r\n    _getWorkSpaceHeight: function() {\r\n        if (this.option(\"crossScrollingEnabled\")) {\r\n            return this._$dateTable.get(0).getBoundingClientRect().height\r\n        }\r\n        return this.$element().get(0).getBoundingClientRect().height\r\n    },\r\n    _dateTableScrollableConfig: function() {\r\n        var headerScrollableOnScroll;\r\n        var config = this.callBase();\r\n        var timelineConfig = {\r\n            direction: HORIZONTAL,\r\n            onStart: function() {\r\n                if (this._headerScrollable) {\r\n                    headerScrollableOnScroll = this._headerScrollable.option(\"onScroll\");\r\n                    this._headerScrollable.option(\"onScroll\", void 0)\r\n                }\r\n            }.bind(this),\r\n            onScroll: function(e) {\r\n                this._headerScrollable && this._headerScrollable.scrollTo({\r\n                    left: e.scrollOffset.left\r\n                })\r\n            }.bind(this),\r\n            onEnd: function(e) {\r\n                this._headerScrollable && this._headerScrollable.option(\"onScroll\", headerScrollableOnScroll)\r\n            }.bind(this)\r\n        };\r\n        return this.option(\"crossScrollingEnabled\") ? config : extend(config, timelineConfig)\r\n    },\r\n    _headerScrollableConfig: function() {\r\n        var config = this.callBase();\r\n        return extend(config, {\r\n            scrollByContent: true\r\n        })\r\n    },\r\n    _renderTimePanel: noop,\r\n    _renderAllDayPanel: noop,\r\n    _getTableAllDay: function() {\r\n        return false\r\n    },\r\n    _getDateHeaderTemplate: function() {\r\n        return this.option(\"timeCellTemplate\")\r\n    },\r\n    _toggleAllDayVisibility: noop,\r\n    _changeAllDayVisibility: noop,\r\n    supportAllDayRow: function() {\r\n        return false\r\n    },\r\n    _getGroupHeaderContainer: function() {\r\n        if (this._isHorizontalGroupedWorkSpace()) {\r\n            return this._$thead\r\n        }\r\n        return this._$sidebarTable\r\n    },\r\n    _insertAllDayRowsIntoDateTable: function() {\r\n        return false\r\n    },\r\n    _createAllDayPanelElements: noop,\r\n    _renderDateHeader: function() {\r\n        var $headerRow = this.callBase();\r\n        if (this._needRenderWeekHeader()) {\r\n            var firstViewDate = new Date(this._firstViewDate);\r\n            var $cells = [];\r\n            var colspan = this._getCellCountInDay();\r\n            var cellTemplate = this.option(\"dateCellTemplate\");\r\n            for (var i = 0; i < this._getWeekDuration() * this.option(\"intervalCount\"); i++) {\r\n                var $th = $(\"<th>\");\r\n                var text = this._formatWeekdayAndDay(firstViewDate);\r\n                if (cellTemplate) {\r\n                    var templateOptions = {\r\n                        model: {\r\n                            text: text,\r\n                            date: new Date(firstViewDate)\r\n                        },\r\n                        container: $th,\r\n                        index: i\r\n                    };\r\n                    cellTemplate.render(templateOptions)\r\n                } else {\r\n                    $th.text(text)\r\n                }\r\n                $th.addClass(HEADER_PANEL_CELL_CLASS).addClass(HEADER_PANEL_WEEK_CELL_CLASS).attr(\"colSpan\", colspan);\r\n                $cells.push($th);\r\n                this._incrementDate(firstViewDate)\r\n            }\r\n            var $row = $(\"<tr>\").addClass(HEADER_ROW_CLASS).append($cells);\r\n            $headerRow.before($row)\r\n        }\r\n    },\r\n    _needRenderWeekHeader: function() {\r\n        return false\r\n    },\r\n    _incrementDate: function(date) {\r\n        date.setDate(date.getDate() + 1)\r\n    },\r\n    _getWeekDuration: function() {\r\n        return 1\r\n    },\r\n    _renderView: function() {\r\n        this._setFirstViewDate();\r\n        var groupCellTemplates = this._renderGroupHeader();\r\n        this._renderDateHeader();\r\n        this._renderAllDayPanel();\r\n        this._renderTimePanel();\r\n        this._renderDateTable();\r\n        this._shader = new HorizontalShader;\r\n        this._updateGroupTableHeight();\r\n        this._$sidebarTable.appendTo(this._sidebarScrollable.$content());\r\n        this._applyCellTemplates(groupCellTemplates)\r\n    },\r\n    _setHorizontalGroupHeaderCellsHeight: noop,\r\n    getIndicationWidth: function() {\r\n        var today = this._getToday();\r\n        var cellWidth = this.getCellWidth();\r\n        var date = this._getIndicationFirstViewDate();\r\n        var hiddenInterval = this._getHiddenInterval();\r\n        var timeDiff = today.getTime() - date.getTime();\r\n        var differenceInDays = Math.ceil(timeDiff / toMs(\"day\")) - 1;\r\n        var duration = timeDiff - differenceInDays * hiddenInterval;\r\n        var cellCount = duration / this.getCellDuration();\r\n        return cellCount * cellWidth\r\n    },\r\n    _renderIndicator: function(height, rtlOffset, $container, groupCount) {\r\n        var $indicator;\r\n        var width = this.getIndicationWidth();\r\n        if (\"vertical\" === this.option(\"groupOrientation\")) {\r\n            $indicator = this._createIndicator($container);\r\n            $indicator.height($container.get(0).getBoundingClientRect().height);\r\n            $indicator.css(\"left\", rtlOffset ? rtlOffset - width : width)\r\n        } else {\r\n            for (var i = 0; i < groupCount; i++) {\r\n                var offset = this._getCellCount() * this.getCellWidth() * i;\r\n                $indicator = this._createIndicator($container);\r\n                $indicator.height($container.get(0).getBoundingClientRect().height);\r\n                $indicator.css(\"left\", rtlOffset ? rtlOffset - width - offset : width + offset)\r\n            }\r\n        }\r\n    },\r\n    _isVerticalShader: function() {\r\n        return false\r\n    },\r\n    _isCurrentTimeHeaderCell: function(headerIndex) {\r\n        var result = false;\r\n        if (this.option(\"showCurrentTimeIndicator\") && this._needRenderDateTimeIndicator()) {\r\n            var date = this._getDateByIndex(headerIndex);\r\n            var now = this._getToday();\r\n            date = new Date(date);\r\n            if (dateUtils.sameDate(now, date)) {\r\n                var startCellDate = new Date(date);\r\n                var endCellDate = new Date(date);\r\n                endCellDate = endCellDate.setMilliseconds(date.getMilliseconds() + this.getCellDuration());\r\n                result = dateUtils.dateInRange(now, startCellDate, endCellDate)\r\n            }\r\n        }\r\n        return result\r\n    },\r\n    _cleanView: function() {\r\n        this.callBase();\r\n        this._$sidebarTable.empty()\r\n    },\r\n    _visibilityChanged: function(visible) {\r\n        this.callBase(visible)\r\n    },\r\n    _setTableSizes: function() {\r\n        var cellHeight = this.getCellHeight();\r\n        var minHeight = this._getWorkSpaceMinHeight();\r\n        var $groupCells = this._$sidebarTable.find(\"tr\");\r\n        var height = cellHeight * $groupCells.length;\r\n        if (height < minHeight) {\r\n            height = minHeight\r\n        }\r\n        this._$sidebarTable.height(height);\r\n        this._$dateTable.height(height);\r\n        this.callBase()\r\n    },\r\n    _getWorkSpaceMinHeight: function() {\r\n        var minHeight = this._getWorkSpaceHeight();\r\n        var workspaceContainerHeight = this.$element().outerHeight(true) - this.getHeaderPanelHeight() - 2 * DATE_TABLE_CELL_BORDER - DATE_TABLE_HEADER_MARGIN;\r\n        if (minHeight < workspaceContainerHeight) {\r\n            minHeight = workspaceContainerHeight\r\n        }\r\n        return minHeight\r\n    },\r\n    _makeGroupRows: function(groups, groupByDate) {\r\n        var tableCreatorStrategy = \"vertical\" === this.option(\"groupOrientation\") ? tableCreator.VERTICAL : tableCreator.HORIZONTAL;\r\n        return tableCreator.makeGroupedTable(tableCreatorStrategy, groups, {\r\n            groupRowClass: this._getGroupRowClass(),\r\n            groupHeaderRowClass: this._getGroupRowClass(),\r\n            groupHeaderClass: this._getGroupHeaderClass.bind(this),\r\n            groupHeaderContentClass: this._getGroupHeaderContentClass()\r\n        }, this._getCellCount() || 1, this.option(\"resourceCellTemplate\"), this._getTotalRowCount(this._getGroupCount()), groupByDate)\r\n    },\r\n    _ensureGroupHeaderCellsHeight: function(cellHeight) {\r\n        var minCellHeight = this._calculateMinCellHeight();\r\n        if (cellHeight < minCellHeight) {\r\n            return minCellHeight\r\n        }\r\n        return cellHeight\r\n    },\r\n    _calculateMinCellHeight: function() {\r\n        var dateTable = this._getDateTable();\r\n        var dateTableRowSelector = \".\" + this._getDateTableRowClass();\r\n        return dateTable.get(0).getBoundingClientRect().height / dateTable.find(dateTableRowSelector).length - 2 * DATE_TABLE_CELL_BORDER\r\n    },\r\n    _getCellCoordinatesByIndex: function(index) {\r\n        return {\r\n            cellIndex: index % this._getCellCount(),\r\n            rowIndex: 0\r\n        }\r\n    },\r\n    _getCellByCoordinates: function(cellCoordinates, groupIndex) {\r\n        var indexes = this._groupedStrategy.prepareCellIndexes(cellCoordinates, groupIndex);\r\n        return this._$dateTable.find(\"tr\").eq(indexes.rowIndex).find(\"td\").eq(indexes.cellIndex)\r\n    },\r\n    _getWorkSpaceWidth: function() {\r\n        return this._$dateTable.outerWidth(true)\r\n    },\r\n    _getGroupIndexByCell: function($cell) {\r\n        return $cell.parent().index()\r\n    },\r\n    _getIndicationFirstViewDate: function() {\r\n        return new Date(this._firstViewDate)\r\n    },\r\n    _getIntervalBetween: function(currentDate, allDay) {\r\n        var startDayHour = this.option(\"startDayHour\");\r\n        var endDayHour = this.option(\"endDayHour\");\r\n        var firstViewDate = this.getStartViewDate();\r\n        var firstViewDateTime = firstViewDate.getTime();\r\n        var hiddenInterval = (24 - endDayHour + startDayHour) * toMs(\"hour\");\r\n        var timeZoneOffset = dateUtils.getTimezonesDifference(firstViewDate, currentDate);\r\n        var apptStart = currentDate.getTime();\r\n        var fullInterval = apptStart - firstViewDateTime - timeZoneOffset;\r\n        var fullDays = Math.floor(fullInterval / toMs(\"day\"));\r\n        var tailDuration = fullInterval - fullDays * toMs(\"day\");\r\n        var tailDelta = 0;\r\n        var cellCount = this._getCellCountInDay() * (fullDays - this._getWeekendsCount(fullDays));\r\n        var gapBeforeAppt = apptStart - dateUtils.trimTime(new Date(currentDate)).getTime();\r\n        var result = cellCount * this.option(\"hoursInterval\") * toMs(\"hour\");\r\n        if (!allDay) {\r\n            if (currentDate.getHours() < startDayHour) {\r\n                tailDelta = tailDuration - hiddenInterval + gapBeforeAppt\r\n            } else {\r\n                if (currentDate.getHours() >= startDayHour && currentDate.getHours() < endDayHour) {\r\n                    tailDelta = tailDuration\r\n                } else {\r\n                    if (currentDate.getHours() >= startDayHour && currentDate.getHours() >= endDayHour) {\r\n                        tailDelta = tailDuration - (gapBeforeAppt - endDayHour * toMs(\"hour\"))\r\n                    } else {\r\n                        if (!fullDays) {\r\n                            result = fullInterval\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            result += tailDelta\r\n        }\r\n        return result\r\n    },\r\n    _getWeekendsCount: function() {\r\n        return 0\r\n    },\r\n    getAllDayContainer: function() {\r\n        return null\r\n    },\r\n    getTimePanelWidth: function() {\r\n        return 0\r\n    },\r\n    getPositionShift: function(timeShift) {\r\n        var positionShift = this.callBase(timeShift);\r\n        var left = this.getCellWidth() * timeShift;\r\n        if (this.option(\"rtlEnabled\")) {\r\n            left *= -1\r\n        }\r\n        left += positionShift.left;\r\n        return {\r\n            top: 0,\r\n            left: left,\r\n            cellPosition: left\r\n        }\r\n    },\r\n    getVisibleBounds: function() {\r\n        var isRtl = this.option(\"rtlEnabled\");\r\n        var result = {};\r\n        var $scrollable = this.getScrollable().$element();\r\n        var cellWidth = this.getCellWidth();\r\n        var scrollableOffset = isRtl ? this.getScrollableOuterWidth() - this.getScrollableScrollLeft() : this.getScrollableScrollLeft();\r\n        var scrolledCellCount = scrollableOffset / cellWidth;\r\n        var visibleCellCount = $scrollable.width() / cellWidth;\r\n        var totalCellCount = isRtl ? scrolledCellCount - visibleCellCount : scrolledCellCount + visibleCellCount;\r\n        var leftDate = this._getDateByIndex(scrolledCellCount);\r\n        var rightDate = this._getDateByIndex(totalCellCount);\r\n        if (isRtl) {\r\n            leftDate = this._getDateByIndex(totalCellCount);\r\n            rightDate = this._getDateByIndex(scrolledCellCount)\r\n        }\r\n        result.left = {\r\n            hours: leftDate.getHours(),\r\n            minutes: leftDate.getMinutes() >= 30 ? 30 : 0,\r\n            date: dateUtils.trimTime(leftDate)\r\n        };\r\n        result.right = {\r\n            hours: rightDate.getHours(),\r\n            minutes: rightDate.getMinutes() >= 30 ? 30 : 0,\r\n            date: dateUtils.trimTime(rightDate)\r\n        };\r\n        return result\r\n    },\r\n    needUpdateScrollPosition: function(hours, minutes, bounds, date) {\r\n        var isUpdateNeeded = false;\r\n        isUpdateNeeded = this._dateWithinBounds(bounds, date);\r\n        if (hours < bounds.left.hours || hours > bounds.right.hours) {\r\n            isUpdateNeeded = true\r\n        }\r\n        if (hours === bounds.left.hours && minutes < bounds.left.minutes) {\r\n            isUpdateNeeded = true\r\n        }\r\n        if (hours === bounds.right.hours && minutes > bounds.right.minutes) {\r\n            isUpdateNeeded = true\r\n        }\r\n        return isUpdateNeeded\r\n    },\r\n    getIntervalDuration: function(allDay) {\r\n        return this.getCellDuration()\r\n    },\r\n    _dateWithinBounds: function(bounds, date) {\r\n        var trimmedDate = dateUtils.trimTime(new Date(date));\r\n        var isUpdateNeeded = false;\r\n        if (trimmedDate < bounds.left.date || trimmedDate > bounds.right.date) {\r\n            isUpdateNeeded = true\r\n        }\r\n        return isUpdateNeeded\r\n    },\r\n    _supportCompactDropDownAppointments: function() {\r\n        return false\r\n    },\r\n    getCellMinWidth: function() {\r\n        return 0\r\n    },\r\n    getWorkSpaceLeftOffset: function() {\r\n        return 0\r\n    },\r\n    scrollToTime: function(hours, minutes, date) {\r\n        var coordinates = this._getScrollCoordinates(hours, minutes, date);\r\n        var scrollable = this.getScrollable();\r\n        var offset = this.option(\"rtlEnabled\") ? this.getScrollableContainer().get(0).getBoundingClientRect().width : 0;\r\n        if (this.option(\"templatesRenderAsynchronously\")) {\r\n            setTimeout(function() {\r\n                scrollable.scrollBy({\r\n                    left: coordinates.left - scrollable.scrollLeft() - offset,\r\n                    top: 0\r\n                })\r\n            })\r\n        } else {\r\n            scrollable.scrollBy({\r\n                left: coordinates.left - scrollable.scrollLeft() - offset,\r\n                top: 0\r\n            })\r\n        }\r\n    }\r\n});\r\nregisterComponent(\"dxSchedulerTimeline\", SchedulerTimeline);\r\nmodule.exports = SchedulerTimeline;\r\n"]},"metadata":{},"sourceType":"script"}