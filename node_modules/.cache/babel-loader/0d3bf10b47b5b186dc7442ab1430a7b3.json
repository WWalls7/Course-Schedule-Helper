{"ast":null,"code":"/**\r\n * DevExtreme (ui/scheduler/timezones/ui.scheduler.timezones.js)\r\n * Version: 19.2.6\r\n * Build date: Thu Jan 30 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar query = require(\"../../../data/query\");\n\nvar errors = require(\"../../../core/errors\");\n\nvar tzData = require(\"./ui.scheduler.timezones_data\");\n\nvar SchedulerTimezones = {\n  _displayNames: tzData.displayNames,\n  _list: tzData.timezones,\n  getTimezones: function () {\n    return this._list;\n  },\n  getDisplayNames: function () {\n    return this._displayNames;\n  },\n  queryableTimezones: function () {\n    return query(this.getTimezones());\n  },\n  getTimezoneById: function (id) {\n    var result;\n    var i = 0;\n    var tzList = this.getTimezones();\n\n    if (id) {\n      while (!result) {\n        if (!tzList[i]) {\n          errors.log(\"W0009\", id);\n          return;\n        }\n\n        var currentId = tzList[i].id;\n\n        if (currentId === id) {\n          result = tzList[i];\n        }\n\n        i++;\n      }\n    }\n\n    return result;\n  },\n  getTimezoneOffsetById: function (id, dateTimeStamp) {\n    var tz = this.getTimezoneById(id);\n    var offsets;\n    var offsetIndices;\n    var untils;\n    var result;\n\n    if (tz) {\n      if (tz.link) {\n        var rootTz = this.getTimezones()[tz.link];\n        offsets = rootTz.offsets;\n        untils = rootTz.untils;\n        offsetIndices = rootTz.offsetIndices;\n      } else {\n        offsets = tz.offsets;\n        untils = tz.untils;\n        offsetIndices = tz.offsetIndices;\n      }\n\n      result = this.getUtcOffset(offsets, offsetIndices, untils, dateTimeStamp);\n    }\n\n    return result;\n  },\n  getUtcOffset: function (offsets, offsetIndices, untils, dateTimeStamp) {\n    var index = 0;\n    var offsetIndicesList = offsetIndices.split(\"\");\n    var untilsList = untils.split(\"|\").map(function (until) {\n      if (\"Infinity\" === until) {\n        return null;\n      }\n\n      return 1e3 * parseInt(until, 36);\n    });\n    var currentUntil = 0;\n\n    for (var i = 0, listLength = untilsList.length; i < listLength; i++) {\n      currentUntil += untilsList[i];\n\n      if (dateTimeStamp >= currentUntil) {\n        index = i;\n        continue;\n      } else {\n        break;\n      }\n    }\n\n    if (untilsList[index + 1]) {\n      index++;\n    }\n\n    return offsets[Number(offsetIndicesList[index])];\n  },\n  getTimezoneShortDisplayNameById: function (id) {\n    var tz = this.getTimezoneById(id);\n    var result;\n\n    if (tz) {\n      result = tz.DisplayName.substring(0, 11);\n    }\n\n    return result;\n  },\n  getTimezonesDisplayName: function () {\n    return query(this.getDisplayNames()).sortBy().toArray();\n  },\n  getTimezoneDisplayNameById: function (id) {\n    var tz = this.getTimezoneById(id);\n    return tz ? this.getDisplayNames()[tz.winIndex] : \"\";\n  },\n  getSimilarTimezones: function (id) {\n    if (!id) {\n      return [];\n    }\n\n    var tz = this.getTimezoneById(id);\n    return this.getTimezonesIdsByWinIndex(tz.winIndex);\n  },\n  getTimezonesIdsByWinIndex: function (winIndex) {\n    return this.queryableTimezones().filter([\"winIndex\", winIndex]).sortBy(\"title\").toArray().map(function (item) {\n      return {\n        id: item.id,\n        displayName: item.title\n      };\n    });\n  },\n  getTimezonesIdsByDisplayName: function (displayName) {\n    var displayNameIndex = this.getDisplayNames().indexOf(displayName);\n    return this.getTimezonesIdsByWinIndex(displayNameIndex);\n  },\n  getClientTimezoneOffset: function (date) {\n    return 6e4 * date.getTimezoneOffset();\n  },\n  processDateDependOnTimezone: function (date, tzOffset) {\n    var result = new Date(date);\n\n    if (tzOffset) {\n      var tzDiff = tzOffset + this.getClientTimezoneOffset(date) / 36e5;\n      result = new Date(result.setHours(result.getHours() + tzDiff));\n    }\n\n    return result;\n  }\n};\nmodule.exports = SchedulerTimezones;","map":{"version":3,"sources":["C:/Users/Swizzle/Desktop/SE Project/Application/csh/node_modules/devextreme/ui/scheduler/timezones/ui.scheduler.timezones.js"],"names":["query","require","errors","tzData","SchedulerTimezones","_displayNames","displayNames","_list","timezones","getTimezones","getDisplayNames","queryableTimezones","getTimezoneById","id","result","i","tzList","log","currentId","getTimezoneOffsetById","dateTimeStamp","tz","offsets","offsetIndices","untils","link","rootTz","getUtcOffset","index","offsetIndicesList","split","untilsList","map","until","parseInt","currentUntil","listLength","length","Number","getTimezoneShortDisplayNameById","DisplayName","substring","getTimezonesDisplayName","sortBy","toArray","getTimezoneDisplayNameById","winIndex","getSimilarTimezones","getTimezonesIdsByWinIndex","filter","item","displayName","title","getTimezonesIdsByDisplayName","displayNameIndex","indexOf","getClientTimezoneOffset","date","getTimezoneOffset","processDateDependOnTimezone","tzOffset","Date","tzDiff","setHours","getHours","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (ui/scheduler/timezones/ui.scheduler.timezones.js)\r\n * Version: 19.2.6\r\n * Build date: Thu Jan 30 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar query = require(\"../../../data/query\");\r\nvar errors = require(\"../../../core/errors\");\r\nvar tzData = require(\"./ui.scheduler.timezones_data\");\r\nvar SchedulerTimezones = {\r\n    _displayNames: tzData.displayNames,\r\n    _list: tzData.timezones,\r\n    getTimezones: function() {\r\n        return this._list\r\n    },\r\n    getDisplayNames: function() {\r\n        return this._displayNames\r\n    },\r\n    queryableTimezones: function() {\r\n        return query(this.getTimezones())\r\n    },\r\n    getTimezoneById: function(id) {\r\n        var result;\r\n        var i = 0;\r\n        var tzList = this.getTimezones();\r\n        if (id) {\r\n            while (!result) {\r\n                if (!tzList[i]) {\r\n                    errors.log(\"W0009\", id);\r\n                    return\r\n                }\r\n                var currentId = tzList[i].id;\r\n                if (currentId === id) {\r\n                    result = tzList[i]\r\n                }\r\n                i++\r\n            }\r\n        }\r\n        return result\r\n    },\r\n    getTimezoneOffsetById: function(id, dateTimeStamp) {\r\n        var tz = this.getTimezoneById(id);\r\n        var offsets;\r\n        var offsetIndices;\r\n        var untils;\r\n        var result;\r\n        if (tz) {\r\n            if (tz.link) {\r\n                var rootTz = this.getTimezones()[tz.link];\r\n                offsets = rootTz.offsets;\r\n                untils = rootTz.untils;\r\n                offsetIndices = rootTz.offsetIndices\r\n            } else {\r\n                offsets = tz.offsets;\r\n                untils = tz.untils;\r\n                offsetIndices = tz.offsetIndices\r\n            }\r\n            result = this.getUtcOffset(offsets, offsetIndices, untils, dateTimeStamp)\r\n        }\r\n        return result\r\n    },\r\n    getUtcOffset: function(offsets, offsetIndices, untils, dateTimeStamp) {\r\n        var index = 0;\r\n        var offsetIndicesList = offsetIndices.split(\"\");\r\n        var untilsList = untils.split(\"|\").map(function(until) {\r\n            if (\"Infinity\" === until) {\r\n                return null\r\n            }\r\n            return 1e3 * parseInt(until, 36)\r\n        });\r\n        var currentUntil = 0;\r\n        for (var i = 0, listLength = untilsList.length; i < listLength; i++) {\r\n            currentUntil += untilsList[i];\r\n            if (dateTimeStamp >= currentUntil) {\r\n                index = i;\r\n                continue\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n        if (untilsList[index + 1]) {\r\n            index++\r\n        }\r\n        return offsets[Number(offsetIndicesList[index])]\r\n    },\r\n    getTimezoneShortDisplayNameById: function(id) {\r\n        var tz = this.getTimezoneById(id);\r\n        var result;\r\n        if (tz) {\r\n            result = tz.DisplayName.substring(0, 11)\r\n        }\r\n        return result\r\n    },\r\n    getTimezonesDisplayName: function() {\r\n        return query(this.getDisplayNames()).sortBy().toArray()\r\n    },\r\n    getTimezoneDisplayNameById: function(id) {\r\n        var tz = this.getTimezoneById(id);\r\n        return tz ? this.getDisplayNames()[tz.winIndex] : \"\"\r\n    },\r\n    getSimilarTimezones: function(id) {\r\n        if (!id) {\r\n            return []\r\n        }\r\n        var tz = this.getTimezoneById(id);\r\n        return this.getTimezonesIdsByWinIndex(tz.winIndex)\r\n    },\r\n    getTimezonesIdsByWinIndex: function(winIndex) {\r\n        return this.queryableTimezones().filter([\"winIndex\", winIndex]).sortBy(\"title\").toArray().map(function(item) {\r\n            return {\r\n                id: item.id,\r\n                displayName: item.title\r\n            }\r\n        })\r\n    },\r\n    getTimezonesIdsByDisplayName: function(displayName) {\r\n        var displayNameIndex = this.getDisplayNames().indexOf(displayName);\r\n        return this.getTimezonesIdsByWinIndex(displayNameIndex)\r\n    },\r\n    getClientTimezoneOffset: function(date) {\r\n        return 6e4 * date.getTimezoneOffset()\r\n    },\r\n    processDateDependOnTimezone: function(date, tzOffset) {\r\n        var result = new Date(date);\r\n        if (tzOffset) {\r\n            var tzDiff = tzOffset + this.getClientTimezoneOffset(date) / 36e5;\r\n            result = new Date(result.setHours(result.getHours() + tzDiff))\r\n        }\r\n        return result\r\n    }\r\n};\r\nmodule.exports = SchedulerTimezones;\r\n"]},"metadata":{},"sourceType":"script"}