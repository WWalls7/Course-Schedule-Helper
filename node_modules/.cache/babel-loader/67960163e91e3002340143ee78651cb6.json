{"ast":null,"code":"/**\r\n * DevExtreme (ui/scheduler/workspaces/ui.scheduler.work_space.grouped.strategy.horizontal.js)\r\n * Version: 19.2.6\r\n * Build date: Thu Jan 30 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar GroupedStrategy = require(\"./ui.scheduler.work_space.grouped.strategy\");\n\nvar HORIZONTAL_GROUPED_ATTR = \"dx-group-row-count\";\nvar HorizontalGroupedStrategy = GroupedStrategy.inherit({\n  prepareCellIndexes: function (cellCoordinates, groupIndex, inAllDay) {\n    var groupByDay = this._workSpace.isGroupedByDate();\n\n    if (!groupByDay) {\n      return {\n        rowIndex: cellCoordinates.rowIndex,\n        cellIndex: cellCoordinates.cellIndex + groupIndex * this._workSpace._getCellCount()\n      };\n    } else {\n      return {\n        rowIndex: cellCoordinates.rowIndex,\n        cellIndex: cellCoordinates.cellIndex * this._workSpace._getGroupCount() + groupIndex\n      };\n    }\n  },\n  calculateCellIndex: function (rowIndex, cellIndex) {\n    cellIndex %= this._workSpace._getCellCount();\n    return this._workSpace._getRowCount() * cellIndex + rowIndex;\n  },\n  getGroupIndex: function (rowIndex, cellIndex) {\n    var groupByDay = this._workSpace.isGroupedByDate();\n\n    var groupCount = this._workSpace._getGroupCount();\n\n    if (groupByDay) {\n      return cellIndex % groupCount;\n    } else {\n      return Math.floor(cellIndex / this._workSpace._getCellCount());\n    }\n  },\n  calculateHeaderCellRepeatCount: function () {\n    return this._workSpace._getGroupCount() || 1;\n  },\n  insertAllDayRowsIntoDateTable: function () {\n    return false;\n  },\n  getTotalCellCount: function (groupCount) {\n    groupCount = groupCount || 1;\n    return this._workSpace._getCellCount() * groupCount;\n  },\n  getTotalRowCount: function () {\n    return this._workSpace._getRowCount();\n  },\n  addAdditionalGroupCellClasses: function (cellClass, index) {\n    cellClass = this._addLastGroupCellClass(cellClass, index);\n    return this._addFirstGroupCellClass(cellClass, index);\n  },\n  _addLastGroupCellClass: function (cellClass, index) {\n    var groupByDay = this._workSpace.option(\"groupByDate\");\n\n    if (groupByDay) {\n      if (index % this._workSpace._getGroupCount() === 0) {\n        return cellClass + \" \" + this.getLastGroupCellClass();\n      }\n    } else {\n      if (index % this._workSpace._getCellCount() === 0) {\n        return cellClass + \" \" + this.getLastGroupCellClass();\n      }\n    }\n\n    return cellClass;\n  },\n  _addFirstGroupCellClass: function (cellClass, index) {\n    if ((index - 1) % this._workSpace._getCellCount() === 0) {\n      return cellClass + \" \" + this.getFirstGroupCellClass();\n    }\n\n    return cellClass;\n  },\n  getHorizontalMax: function (groupIndex) {\n    return this._workSpace.getMaxAllowedPosition()[groupIndex];\n  },\n  getVerticalMax: function (groupIndex) {\n    return this._workSpace.getMaxAllowedVerticalPosition()[0];\n  },\n  calculateTimeCellRepeatCount: function () {\n    return 1;\n  },\n  getWorkSpaceMinWidth: function () {\n    return this._workSpace.$element().get(0).getBoundingClientRect().width - this._workSpace.getTimePanelWidth();\n  },\n  getAllDayOffset: function () {\n    return this._workSpace.getAllDayHeight();\n  },\n  getAllDayTableHeight: function () {\n    return this._workSpace._$allDayTable.get(0).getBoundingClientRect().height || 0;\n  },\n  getGroupCountAttr: function (groupRowCount, groupRows) {\n    return {\n      attr: HORIZONTAL_GROUPED_ATTR,\n      count: groupRows && groupRows.elements.length\n    };\n  },\n  getLeftOffset: function () {\n    return this._workSpace.getTimePanelWidth();\n  },\n  getGroupBoundsOffset: function (cellCount, $cells, cellWidth, coordinates) {\n    var groupIndex;\n    var cellIndex;\n    var startCellIndex;\n    var startOffset;\n    var endOffset;\n\n    if (this._workSpace.isGroupedByDate()) {\n      startCellIndex = 0;\n      startOffset = $cells.eq(startCellIndex).offset().left - cellWidth / 2;\n      endOffset = $cells.eq(cellCount * this._workSpace._getGroupCount() - 1).offset().left + cellWidth + cellWidth / 2;\n    } else {\n      cellIndex = this._workSpace.getCellIndexByCoordinates(coordinates);\n      groupIndex = coordinates.groupIndex || Math.floor(cellIndex / cellCount);\n      startCellIndex = groupIndex * cellCount;\n      startOffset = $cells.eq(startCellIndex).offset().left - cellWidth / 2;\n      endOffset = $cells.eq(startCellIndex + cellCount - 1).offset().left + cellWidth + cellWidth / 2;\n    }\n\n    return {\n      left: startOffset,\n      right: endOffset,\n      top: 0,\n      bottom: 0\n    };\n  },\n  shiftIndicator: function ($indicator, height, rtlOffset, i) {\n    var offset = this._workSpace._getCellCount() * this._workSpace.getRoundedCellWidth(i - 1, 0) * i + this._workSpace.getIndicatorOffset(i) + i;\n    var horizontalOffset = rtlOffset ? rtlOffset - offset : offset;\n    $indicator.css(\"left\", horizontalOffset);\n    $indicator.css(\"top\", height);\n  },\n  getShaderOffset: function (i, width) {\n    var offset = this._workSpace._getCellCount() * this._workSpace.getRoundedCellWidth(i - 1) * i;\n    return this._workSpace.option(\"rtlEnabled\") ? this._workSpace._dateTableScrollable.$content().get(0).getBoundingClientRect().width - offset - this._workSpace.getTimePanelWidth() - width : offset;\n  },\n  getShaderTopOffset: function (i) {\n    return -this.getShaderMaxHeight() * (i > 0 ? 1 : 0);\n  },\n  getShaderHeight: function () {\n    var height = this._workSpace.getIndicationHeight();\n\n    return height;\n  },\n  getShaderMaxHeight: function () {\n    return this._workSpace._dateTableScrollable.$content().get(0).getBoundingClientRect().height;\n  },\n  getShaderWidth: function (i) {\n    return this._workSpace.getIndicationWidth(i);\n  },\n  getScrollableScrollTop: function (allDay) {\n    return !allDay ? this._workSpace.getScrollable().scrollTop() : 0;\n  }\n});\nmodule.exports = HorizontalGroupedStrategy;","map":{"version":3,"sources":["C:/Users/Swizzle/Desktop/SE Project/Application/csh/node_modules/devextreme/ui/scheduler/workspaces/ui.scheduler.work_space.grouped.strategy.horizontal.js"],"names":["GroupedStrategy","require","HORIZONTAL_GROUPED_ATTR","HorizontalGroupedStrategy","inherit","prepareCellIndexes","cellCoordinates","groupIndex","inAllDay","groupByDay","_workSpace","isGroupedByDate","rowIndex","cellIndex","_getCellCount","_getGroupCount","calculateCellIndex","_getRowCount","getGroupIndex","groupCount","Math","floor","calculateHeaderCellRepeatCount","insertAllDayRowsIntoDateTable","getTotalCellCount","getTotalRowCount","addAdditionalGroupCellClasses","cellClass","index","_addLastGroupCellClass","_addFirstGroupCellClass","option","getLastGroupCellClass","getFirstGroupCellClass","getHorizontalMax","getMaxAllowedPosition","getVerticalMax","getMaxAllowedVerticalPosition","calculateTimeCellRepeatCount","getWorkSpaceMinWidth","$element","get","getBoundingClientRect","width","getTimePanelWidth","getAllDayOffset","getAllDayHeight","getAllDayTableHeight","_$allDayTable","height","getGroupCountAttr","groupRowCount","groupRows","attr","count","elements","length","getLeftOffset","getGroupBoundsOffset","cellCount","$cells","cellWidth","coordinates","startCellIndex","startOffset","endOffset","eq","offset","left","getCellIndexByCoordinates","right","top","bottom","shiftIndicator","$indicator","rtlOffset","i","getRoundedCellWidth","getIndicatorOffset","horizontalOffset","css","getShaderOffset","_dateTableScrollable","$content","getShaderTopOffset","getShaderMaxHeight","getShaderHeight","getIndicationHeight","getShaderWidth","getIndicationWidth","getScrollableScrollTop","allDay","getScrollable","scrollTop","module","exports"],"mappings":"AAAA;;;;;;;;AAQA;;AACA,IAAIA,eAAe,GAAGC,OAAO,CAAC,4CAAD,CAA7B;;AACA,IAAIC,uBAAuB,GAAG,oBAA9B;AACA,IAAIC,yBAAyB,GAAGH,eAAe,CAACI,OAAhB,CAAwB;AACpDC,EAAAA,kBAAkB,EAAE,UAASC,eAAT,EAA0BC,UAA1B,EAAsCC,QAAtC,EAAgD;AAChE,QAAIC,UAAU,GAAG,KAAKC,UAAL,CAAgBC,eAAhB,EAAjB;;AACA,QAAI,CAACF,UAAL,EAAiB;AACb,aAAO;AACHG,QAAAA,QAAQ,EAAEN,eAAe,CAACM,QADvB;AAEHC,QAAAA,SAAS,EAAEP,eAAe,CAACO,SAAhB,GAA4BN,UAAU,GAAG,KAAKG,UAAL,CAAgBI,aAAhB;AAFjD,OAAP;AAIH,KALD,MAKO;AACH,aAAO;AACHF,QAAAA,QAAQ,EAAEN,eAAe,CAACM,QADvB;AAEHC,QAAAA,SAAS,EAAEP,eAAe,CAACO,SAAhB,GAA4B,KAAKH,UAAL,CAAgBK,cAAhB,EAA5B,GAA+DR;AAFvE,OAAP;AAIH;AACJ,GAdmD;AAepDS,EAAAA,kBAAkB,EAAE,UAASJ,QAAT,EAAmBC,SAAnB,EAA8B;AAC9CA,IAAAA,SAAS,IAAI,KAAKH,UAAL,CAAgBI,aAAhB,EAAb;AACA,WAAO,KAAKJ,UAAL,CAAgBO,YAAhB,KAAiCJ,SAAjC,GAA6CD,QAApD;AACH,GAlBmD;AAmBpDM,EAAAA,aAAa,EAAE,UAASN,QAAT,EAAmBC,SAAnB,EAA8B;AACzC,QAAIJ,UAAU,GAAG,KAAKC,UAAL,CAAgBC,eAAhB,EAAjB;;AACA,QAAIQ,UAAU,GAAG,KAAKT,UAAL,CAAgBK,cAAhB,EAAjB;;AACA,QAAIN,UAAJ,EAAgB;AACZ,aAAOI,SAAS,GAAGM,UAAnB;AACH,KAFD,MAEO;AACH,aAAOC,IAAI,CAACC,KAAL,CAAWR,SAAS,GAAG,KAAKH,UAAL,CAAgBI,aAAhB,EAAvB,CAAP;AACH;AACJ,GA3BmD;AA4BpDQ,EAAAA,8BAA8B,EAAE,YAAW;AACvC,WAAO,KAAKZ,UAAL,CAAgBK,cAAhB,MAAoC,CAA3C;AACH,GA9BmD;AA+BpDQ,EAAAA,6BAA6B,EAAE,YAAW;AACtC,WAAO,KAAP;AACH,GAjCmD;AAkCpDC,EAAAA,iBAAiB,EAAE,UAASL,UAAT,EAAqB;AACpCA,IAAAA,UAAU,GAAGA,UAAU,IAAI,CAA3B;AACA,WAAO,KAAKT,UAAL,CAAgBI,aAAhB,KAAkCK,UAAzC;AACH,GArCmD;AAsCpDM,EAAAA,gBAAgB,EAAE,YAAW;AACzB,WAAO,KAAKf,UAAL,CAAgBO,YAAhB,EAAP;AACH,GAxCmD;AAyCpDS,EAAAA,6BAA6B,EAAE,UAASC,SAAT,EAAoBC,KAApB,EAA2B;AACtDD,IAAAA,SAAS,GAAG,KAAKE,sBAAL,CAA4BF,SAA5B,EAAuCC,KAAvC,CAAZ;AACA,WAAO,KAAKE,uBAAL,CAA6BH,SAA7B,EAAwCC,KAAxC,CAAP;AACH,GA5CmD;AA6CpDC,EAAAA,sBAAsB,EAAE,UAASF,SAAT,EAAoBC,KAApB,EAA2B;AAC/C,QAAInB,UAAU,GAAG,KAAKC,UAAL,CAAgBqB,MAAhB,CAAuB,aAAvB,CAAjB;;AACA,QAAItB,UAAJ,EAAgB;AACZ,UAAImB,KAAK,GAAG,KAAKlB,UAAL,CAAgBK,cAAhB,EAAR,KAA6C,CAAjD,EAAoD;AAChD,eAAOY,SAAS,GAAG,GAAZ,GAAkB,KAAKK,qBAAL,EAAzB;AACH;AACJ,KAJD,MAIO;AACH,UAAIJ,KAAK,GAAG,KAAKlB,UAAL,CAAgBI,aAAhB,EAAR,KAA4C,CAAhD,EAAmD;AAC/C,eAAOa,SAAS,GAAG,GAAZ,GAAkB,KAAKK,qBAAL,EAAzB;AACH;AACJ;;AACD,WAAOL,SAAP;AACH,GAzDmD;AA0DpDG,EAAAA,uBAAuB,EAAE,UAASH,SAAT,EAAoBC,KAApB,EAA2B;AAChD,QAAI,CAACA,KAAK,GAAG,CAAT,IAAc,KAAKlB,UAAL,CAAgBI,aAAhB,EAAd,KAAkD,CAAtD,EAAyD;AACrD,aAAOa,SAAS,GAAG,GAAZ,GAAkB,KAAKM,sBAAL,EAAzB;AACH;;AACD,WAAON,SAAP;AACH,GA/DmD;AAgEpDO,EAAAA,gBAAgB,EAAE,UAAS3B,UAAT,EAAqB;AACnC,WAAO,KAAKG,UAAL,CAAgByB,qBAAhB,GAAwC5B,UAAxC,CAAP;AACH,GAlEmD;AAmEpD6B,EAAAA,cAAc,EAAE,UAAS7B,UAAT,EAAqB;AACjC,WAAO,KAAKG,UAAL,CAAgB2B,6BAAhB,GAAgD,CAAhD,CAAP;AACH,GArEmD;AAsEpDC,EAAAA,4BAA4B,EAAE,YAAW;AACrC,WAAO,CAAP;AACH,GAxEmD;AAyEpDC,EAAAA,oBAAoB,EAAE,YAAW;AAC7B,WAAO,KAAK7B,UAAL,CAAgB8B,QAAhB,GAA2BC,GAA3B,CAA+B,CAA/B,EAAkCC,qBAAlC,GAA0DC,KAA1D,GAAkE,KAAKjC,UAAL,CAAgBkC,iBAAhB,EAAzE;AACH,GA3EmD;AA4EpDC,EAAAA,eAAe,EAAE,YAAW;AACxB,WAAO,KAAKnC,UAAL,CAAgBoC,eAAhB,EAAP;AACH,GA9EmD;AA+EpDC,EAAAA,oBAAoB,EAAE,YAAW;AAC7B,WAAO,KAAKrC,UAAL,CAAgBsC,aAAhB,CAA8BP,GAA9B,CAAkC,CAAlC,EAAqCC,qBAArC,GAA6DO,MAA7D,IAAuE,CAA9E;AACH,GAjFmD;AAkFpDC,EAAAA,iBAAiB,EAAE,UAASC,aAAT,EAAwBC,SAAxB,EAAmC;AAClD,WAAO;AACHC,MAAAA,IAAI,EAAEnD,uBADH;AAEHoD,MAAAA,KAAK,EAAEF,SAAS,IAAIA,SAAS,CAACG,QAAV,CAAmBC;AAFpC,KAAP;AAIH,GAvFmD;AAwFpDC,EAAAA,aAAa,EAAE,YAAW;AACtB,WAAO,KAAK/C,UAAL,CAAgBkC,iBAAhB,EAAP;AACH,GA1FmD;AA2FpDc,EAAAA,oBAAoB,EAAE,UAASC,SAAT,EAAoBC,MAApB,EAA4BC,SAA5B,EAAuCC,WAAvC,EAAoD;AACtE,QAAIvD,UAAJ;AACA,QAAIM,SAAJ;AACA,QAAIkD,cAAJ;AACA,QAAIC,WAAJ;AACA,QAAIC,SAAJ;;AACA,QAAI,KAAKvD,UAAL,CAAgBC,eAAhB,EAAJ,EAAuC;AACnCoD,MAAAA,cAAc,GAAG,CAAjB;AACAC,MAAAA,WAAW,GAAGJ,MAAM,CAACM,EAAP,CAAUH,cAAV,EAA0BI,MAA1B,GAAmCC,IAAnC,GAA0CP,SAAS,GAAG,CAApE;AACAI,MAAAA,SAAS,GAAGL,MAAM,CAACM,EAAP,CAAUP,SAAS,GAAG,KAAKjD,UAAL,CAAgBK,cAAhB,EAAZ,GAA+C,CAAzD,EAA4DoD,MAA5D,GAAqEC,IAArE,GAA4EP,SAA5E,GAAwFA,SAAS,GAAG,CAAhH;AACH,KAJD,MAIO;AACHhD,MAAAA,SAAS,GAAG,KAAKH,UAAL,CAAgB2D,yBAAhB,CAA0CP,WAA1C,CAAZ;AACAvD,MAAAA,UAAU,GAAGuD,WAAW,CAACvD,UAAZ,IAA0Ba,IAAI,CAACC,KAAL,CAAWR,SAAS,GAAG8C,SAAvB,CAAvC;AACAI,MAAAA,cAAc,GAAGxD,UAAU,GAAGoD,SAA9B;AACAK,MAAAA,WAAW,GAAGJ,MAAM,CAACM,EAAP,CAAUH,cAAV,EAA0BI,MAA1B,GAAmCC,IAAnC,GAA0CP,SAAS,GAAG,CAApE;AACAI,MAAAA,SAAS,GAAGL,MAAM,CAACM,EAAP,CAAUH,cAAc,GAAGJ,SAAjB,GAA6B,CAAvC,EAA0CQ,MAA1C,GAAmDC,IAAnD,GAA0DP,SAA1D,GAAsEA,SAAS,GAAG,CAA9F;AACH;;AACD,WAAO;AACHO,MAAAA,IAAI,EAAEJ,WADH;AAEHM,MAAAA,KAAK,EAAEL,SAFJ;AAGHM,MAAAA,GAAG,EAAE,CAHF;AAIHC,MAAAA,MAAM,EAAE;AAJL,KAAP;AAMH,GAlHmD;AAmHpDC,EAAAA,cAAc,EAAE,UAASC,UAAT,EAAqBzB,MAArB,EAA6B0B,SAA7B,EAAwCC,CAAxC,EAA2C;AACvD,QAAIT,MAAM,GAAG,KAAKzD,UAAL,CAAgBI,aAAhB,KAAkC,KAAKJ,UAAL,CAAgBmE,mBAAhB,CAAoCD,CAAC,GAAG,CAAxC,EAA2C,CAA3C,CAAlC,GAAkFA,CAAlF,GAAsF,KAAKlE,UAAL,CAAgBoE,kBAAhB,CAAmCF,CAAnC,CAAtF,GAA8HA,CAA3I;AACA,QAAIG,gBAAgB,GAAGJ,SAAS,GAAGA,SAAS,GAAGR,MAAf,GAAwBA,MAAxD;AACAO,IAAAA,UAAU,CAACM,GAAX,CAAe,MAAf,EAAuBD,gBAAvB;AACAL,IAAAA,UAAU,CAACM,GAAX,CAAe,KAAf,EAAsB/B,MAAtB;AACH,GAxHmD;AAyHpDgC,EAAAA,eAAe,EAAE,UAASL,CAAT,EAAYjC,KAAZ,EAAmB;AAChC,QAAIwB,MAAM,GAAG,KAAKzD,UAAL,CAAgBI,aAAhB,KAAkC,KAAKJ,UAAL,CAAgBmE,mBAAhB,CAAoCD,CAAC,GAAG,CAAxC,CAAlC,GAA+EA,CAA5F;AACA,WAAO,KAAKlE,UAAL,CAAgBqB,MAAhB,CAAuB,YAAvB,IAAuC,KAAKrB,UAAL,CAAgBwE,oBAAhB,CAAqCC,QAArC,GAAgD1C,GAAhD,CAAoD,CAApD,EAAuDC,qBAAvD,GAA+EC,KAA/E,GAAuFwB,MAAvF,GAAgG,KAAKzD,UAAL,CAAgBkC,iBAAhB,EAAhG,GAAsID,KAA7K,GAAqLwB,MAA5L;AACH,GA5HmD;AA6HpDiB,EAAAA,kBAAkB,EAAE,UAASR,CAAT,EAAY;AAC5B,WAAO,CAAC,KAAKS,kBAAL,EAAD,IAA8BT,CAAC,GAAG,CAAJ,GAAQ,CAAR,GAAY,CAA1C,CAAP;AACH,GA/HmD;AAgIpDU,EAAAA,eAAe,EAAE,YAAW;AACxB,QAAIrC,MAAM,GAAG,KAAKvC,UAAL,CAAgB6E,mBAAhB,EAAb;;AACA,WAAOtC,MAAP;AACH,GAnImD;AAoIpDoC,EAAAA,kBAAkB,EAAE,YAAW;AAC3B,WAAO,KAAK3E,UAAL,CAAgBwE,oBAAhB,CAAqCC,QAArC,GAAgD1C,GAAhD,CAAoD,CAApD,EAAuDC,qBAAvD,GAA+EO,MAAtF;AACH,GAtImD;AAuIpDuC,EAAAA,cAAc,EAAE,UAASZ,CAAT,EAAY;AACxB,WAAO,KAAKlE,UAAL,CAAgB+E,kBAAhB,CAAmCb,CAAnC,CAAP;AACH,GAzImD;AA0IpDc,EAAAA,sBAAsB,EAAE,UAASC,MAAT,EAAiB;AACrC,WAAO,CAACA,MAAD,GAAU,KAAKjF,UAAL,CAAgBkF,aAAhB,GAAgCC,SAAhC,EAAV,GAAwD,CAA/D;AACH;AA5ImD,CAAxB,CAAhC;AA8IAC,MAAM,CAACC,OAAP,GAAiB5F,yBAAjB","sourcesContent":["/**\r\n * DevExtreme (ui/scheduler/workspaces/ui.scheduler.work_space.grouped.strategy.horizontal.js)\r\n * Version: 19.2.6\r\n * Build date: Thu Jan 30 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar GroupedStrategy = require(\"./ui.scheduler.work_space.grouped.strategy\");\r\nvar HORIZONTAL_GROUPED_ATTR = \"dx-group-row-count\";\r\nvar HorizontalGroupedStrategy = GroupedStrategy.inherit({\r\n    prepareCellIndexes: function(cellCoordinates, groupIndex, inAllDay) {\r\n        var groupByDay = this._workSpace.isGroupedByDate();\r\n        if (!groupByDay) {\r\n            return {\r\n                rowIndex: cellCoordinates.rowIndex,\r\n                cellIndex: cellCoordinates.cellIndex + groupIndex * this._workSpace._getCellCount()\r\n            }\r\n        } else {\r\n            return {\r\n                rowIndex: cellCoordinates.rowIndex,\r\n                cellIndex: cellCoordinates.cellIndex * this._workSpace._getGroupCount() + groupIndex\r\n            }\r\n        }\r\n    },\r\n    calculateCellIndex: function(rowIndex, cellIndex) {\r\n        cellIndex %= this._workSpace._getCellCount();\r\n        return this._workSpace._getRowCount() * cellIndex + rowIndex\r\n    },\r\n    getGroupIndex: function(rowIndex, cellIndex) {\r\n        var groupByDay = this._workSpace.isGroupedByDate();\r\n        var groupCount = this._workSpace._getGroupCount();\r\n        if (groupByDay) {\r\n            return cellIndex % groupCount\r\n        } else {\r\n            return Math.floor(cellIndex / this._workSpace._getCellCount())\r\n        }\r\n    },\r\n    calculateHeaderCellRepeatCount: function() {\r\n        return this._workSpace._getGroupCount() || 1\r\n    },\r\n    insertAllDayRowsIntoDateTable: function() {\r\n        return false\r\n    },\r\n    getTotalCellCount: function(groupCount) {\r\n        groupCount = groupCount || 1;\r\n        return this._workSpace._getCellCount() * groupCount\r\n    },\r\n    getTotalRowCount: function() {\r\n        return this._workSpace._getRowCount()\r\n    },\r\n    addAdditionalGroupCellClasses: function(cellClass, index) {\r\n        cellClass = this._addLastGroupCellClass(cellClass, index);\r\n        return this._addFirstGroupCellClass(cellClass, index)\r\n    },\r\n    _addLastGroupCellClass: function(cellClass, index) {\r\n        var groupByDay = this._workSpace.option(\"groupByDate\");\r\n        if (groupByDay) {\r\n            if (index % this._workSpace._getGroupCount() === 0) {\r\n                return cellClass + \" \" + this.getLastGroupCellClass()\r\n            }\r\n        } else {\r\n            if (index % this._workSpace._getCellCount() === 0) {\r\n                return cellClass + \" \" + this.getLastGroupCellClass()\r\n            }\r\n        }\r\n        return cellClass\r\n    },\r\n    _addFirstGroupCellClass: function(cellClass, index) {\r\n        if ((index - 1) % this._workSpace._getCellCount() === 0) {\r\n            return cellClass + \" \" + this.getFirstGroupCellClass()\r\n        }\r\n        return cellClass\r\n    },\r\n    getHorizontalMax: function(groupIndex) {\r\n        return this._workSpace.getMaxAllowedPosition()[groupIndex]\r\n    },\r\n    getVerticalMax: function(groupIndex) {\r\n        return this._workSpace.getMaxAllowedVerticalPosition()[0]\r\n    },\r\n    calculateTimeCellRepeatCount: function() {\r\n        return 1\r\n    },\r\n    getWorkSpaceMinWidth: function() {\r\n        return this._workSpace.$element().get(0).getBoundingClientRect().width - this._workSpace.getTimePanelWidth()\r\n    },\r\n    getAllDayOffset: function() {\r\n        return this._workSpace.getAllDayHeight()\r\n    },\r\n    getAllDayTableHeight: function() {\r\n        return this._workSpace._$allDayTable.get(0).getBoundingClientRect().height || 0\r\n    },\r\n    getGroupCountAttr: function(groupRowCount, groupRows) {\r\n        return {\r\n            attr: HORIZONTAL_GROUPED_ATTR,\r\n            count: groupRows && groupRows.elements.length\r\n        }\r\n    },\r\n    getLeftOffset: function() {\r\n        return this._workSpace.getTimePanelWidth()\r\n    },\r\n    getGroupBoundsOffset: function(cellCount, $cells, cellWidth, coordinates) {\r\n        var groupIndex;\r\n        var cellIndex;\r\n        var startCellIndex;\r\n        var startOffset;\r\n        var endOffset;\r\n        if (this._workSpace.isGroupedByDate()) {\r\n            startCellIndex = 0;\r\n            startOffset = $cells.eq(startCellIndex).offset().left - cellWidth / 2;\r\n            endOffset = $cells.eq(cellCount * this._workSpace._getGroupCount() - 1).offset().left + cellWidth + cellWidth / 2\r\n        } else {\r\n            cellIndex = this._workSpace.getCellIndexByCoordinates(coordinates);\r\n            groupIndex = coordinates.groupIndex || Math.floor(cellIndex / cellCount);\r\n            startCellIndex = groupIndex * cellCount;\r\n            startOffset = $cells.eq(startCellIndex).offset().left - cellWidth / 2;\r\n            endOffset = $cells.eq(startCellIndex + cellCount - 1).offset().left + cellWidth + cellWidth / 2\r\n        }\r\n        return {\r\n            left: startOffset,\r\n            right: endOffset,\r\n            top: 0,\r\n            bottom: 0\r\n        }\r\n    },\r\n    shiftIndicator: function($indicator, height, rtlOffset, i) {\r\n        var offset = this._workSpace._getCellCount() * this._workSpace.getRoundedCellWidth(i - 1, 0) * i + this._workSpace.getIndicatorOffset(i) + i;\r\n        var horizontalOffset = rtlOffset ? rtlOffset - offset : offset;\r\n        $indicator.css(\"left\", horizontalOffset);\r\n        $indicator.css(\"top\", height)\r\n    },\r\n    getShaderOffset: function(i, width) {\r\n        var offset = this._workSpace._getCellCount() * this._workSpace.getRoundedCellWidth(i - 1) * i;\r\n        return this._workSpace.option(\"rtlEnabled\") ? this._workSpace._dateTableScrollable.$content().get(0).getBoundingClientRect().width - offset - this._workSpace.getTimePanelWidth() - width : offset\r\n    },\r\n    getShaderTopOffset: function(i) {\r\n        return -this.getShaderMaxHeight() * (i > 0 ? 1 : 0)\r\n    },\r\n    getShaderHeight: function() {\r\n        var height = this._workSpace.getIndicationHeight();\r\n        return height\r\n    },\r\n    getShaderMaxHeight: function() {\r\n        return this._workSpace._dateTableScrollable.$content().get(0).getBoundingClientRect().height\r\n    },\r\n    getShaderWidth: function(i) {\r\n        return this._workSpace.getIndicationWidth(i)\r\n    },\r\n    getScrollableScrollTop: function(allDay) {\r\n        return !allDay ? this._workSpace.getScrollable().scrollTop() : 0\r\n    }\r\n});\r\nmodule.exports = HorizontalGroupedStrategy;\r\n"]},"metadata":{},"sourceType":"script"}