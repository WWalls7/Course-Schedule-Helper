{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Swizzle\\\\Desktop\\\\SE Project\\\\Application\\\\csh\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport rootReducer from './store/rootReducer';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport { reduxFirestore, getFirestore, createFirestoreInstance } from 'redux-firestore';\nimport { ReactReduxFirebaseProvider, getFirebase } from 'react-redux-firebase';\nimport fbConfig from './config/fbConfig';\nimport firebase from 'firebase/app';\nconst store = createStore(rootReducer, compose(applyMiddleware(thunk.withExtraArgument({\n  getFirebase,\n  getFirestore\n})), reduxFirestore(firebase, fbConfig)));\nconst config = {\n  userProfile: 'users',\n  // where profiles are stored in database,\n  useFirestoreForProfile: true\n};\nconst rrfProps = {\n  firebase,\n  config,\n  dispatch: store.dispatch,\n  createFirestoreInstance\n}; // const rrfProps = {\n//     firebase,\n//     config: fbConfig,\n//     dispatch: store.dispatch,\n//     createFirestoreInstance \n// };\n\nReactDOM.render(React.createElement(Provider, {\n  store: store,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 42\n  },\n  __self: this\n}, React.createElement(ReactReduxFirebaseProvider, Object.assign({}, rrfProps, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 43\n  },\n  __self: this\n}), React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 44\n  },\n  __self: this\n}))), document.getElementById(\"root\"));\nserviceWorker.unregister();\n\nconst fs = require('fs');\n\nconst readline = require('readline');\n\nconst {\n  google\n} = require('googleapis'); // If modifying these scopes, delete token.json.\n\n\nconst SCOPES = ['https://www.googleapis.com/auth/calendar.readonly']; // The file token.json stores the user's access and refresh tokens, and is\n// created automatically when the authorization flow completes for the first\n// time.\n\nconst TOKEN_PATH = 'token.json'; // Load client secrets from a local file.\n\nfs.readFile('credentials.json', (err, content) => {\n  if (err) return console.log('Error loading client secret file:', err); // Authorize a client with credentials, then call the Google Calendar API.\n\n  authorize(JSON.parse(content), listEvents);\n});\n/**\n * Create an OAuth2 client with the given credentials, and then execute the\n * given callback function.\n * @param {Object} credentials The authorization client credentials.\n * @param {function} callback The callback to call with the authorized client.\n */\n\nfunction authorize(credentials, callback) {\n  const {\n    client_secret,\n    client_id,\n    redirect_uris\n  } = credentials.installed;\n  const oAuth2Client = new google.auth.OAuth2(client_id, client_secret, redirect_uris[0]); // Check if we have previously stored a token.\n\n  fs.readFile(TOKEN_PATH, (err, token) => {\n    if (err) return getAccessToken(oAuth2Client, callback);\n    oAuth2Client.setCredentials(JSON.parse(token));\n    callback(oAuth2Client);\n  });\n}\n/**\n * Get and store new token after prompting for user authorization, and then\n * execute the given callback with the authorized OAuth2 client.\n * @param {google.auth.OAuth2} oAuth2Client The OAuth2 client to get token for.\n * @param {getEventsCallback} callback The callback for the authorized client.\n */\n\n\nfunction getAccessToken(oAuth2Client, callback) {\n  const authUrl = oAuth2Client.generateAuthUrl({\n    access_type: 'offline',\n    scope: SCOPES\n  });\n  console.log('Authorize this app by visiting this url:', authUrl);\n  const rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout\n  });\n  rl.question('Enter the code from that page here: ', code => {\n    rl.close();\n    oAuth2Client.getToken(code, (err, token) => {\n      if (err) return console.error('Error retrieving access token', err);\n      oAuth2Client.setCredentials(token); // Store the token to disk for later program executions\n\n      fs.writeFile(TOKEN_PATH, JSON.stringify(token), err => {\n        if (err) return console.error(err);\n        console.log('Token stored to', TOKEN_PATH);\n      });\n      callback(oAuth2Client);\n    });\n  });\n}\n/**\n * Lists the next 10 events on the user's primary calendar.\n * @param {google.auth.OAuth2} auth An authorized OAuth2 client.\n */\n\n\nfunction listEvents(auth) {\n  const calendar = google.calendar({\n    version: 'v3',\n    auth\n  });\n  calendar.events.list({\n    calendarId: 'primary',\n    timeMin: new Date().toISOString(),\n    maxResults: 10,\n    singleEvents: true,\n    orderBy: 'startTime'\n  }, (err, res) => {\n    if (err) return console.log('The API returned an error: ' + err);\n    const events = res.data.items;\n\n    if (events.length) {\n      console.log('Upcoming 10 events:');\n      events.map((event, i) => {\n        const start = event.start.dateTime || event.start.date;\n        console.log(`${start} - ${event.summary}`);\n      });\n    } else {\n      console.log('No upcoming events found.');\n    }\n  });\n}","map":{"version":3,"sources":["C:/Users/Swizzle/Desktop/SE Project/Application/csh/src/index.js"],"names":["React","ReactDOM","App","serviceWorker","createStore","applyMiddleware","compose","rootReducer","Provider","thunk","reduxFirestore","getFirestore","createFirestoreInstance","ReactReduxFirebaseProvider","getFirebase","fbConfig","firebase","store","withExtraArgument","config","userProfile","useFirestoreForProfile","rrfProps","dispatch","render","document","getElementById","unregister","fs","require","readline","google","SCOPES","TOKEN_PATH","readFile","err","content","console","log","authorize","JSON","parse","listEvents","credentials","callback","client_secret","client_id","redirect_uris","installed","oAuth2Client","auth","OAuth2","token","getAccessToken","setCredentials","authUrl","generateAuthUrl","access_type","scope","rl","createInterface","input","process","stdin","output","stdout","question","code","close","getToken","error","writeFile","stringify","calendar","version","events","list","calendarId","timeMin","Date","toISOString","maxResults","singleEvents","orderBy","res","data","items","length","map","event","i","start","dateTime","date","summary"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore, applyMiddleware, compose} from 'redux';\nimport rootReducer from './store/rootReducer';\nimport {Provider} from 'react-redux';\nimport thunk from 'redux-thunk';\nimport {reduxFirestore, getFirestore, createFirestoreInstance} from 'redux-firestore';\nimport {ReactReduxFirebaseProvider, getFirebase} from 'react-redux-firebase';\nimport fbConfig from './config/fbConfig';\nimport firebase from 'firebase/app';\n\nconst store = createStore(\n    rootReducer,\n    compose(\n        applyMiddleware(thunk.withExtraArgument({getFirebase, getFirestore})),\n        reduxFirestore(firebase, fbConfig)\n    )\n);\n\nconst config = {\n  userProfile: 'users', // where profiles are stored in database,\n  useFirestoreForProfile: true\n};\n\nconst rrfProps = {\n  firebase,\n  config,\n  dispatch: store.dispatch,\n  createFirestoreInstance\n};\n// const rrfProps = {\n//     firebase,\n//     config: fbConfig,\n//     dispatch: store.dispatch,\n//     createFirestoreInstance \n// };\n\nReactDOM.render(\n    <Provider store={store}>\n      <ReactReduxFirebaseProvider {...rrfProps}>\n        <App />\n      </ReactReduxFirebaseProvider>\n    </Provider>,\n    document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n\n\n\n\nconst fs = require('fs');\nconst readline = require('readline');\nconst {google} = require('googleapis');\n\n// If modifying these scopes, delete token.json.\nconst SCOPES = ['https://www.googleapis.com/auth/calendar.readonly'];\n// The file token.json stores the user's access and refresh tokens, and is\n// created automatically when the authorization flow completes for the first\n// time.\nconst TOKEN_PATH = 'token.json';\n\n// Load client secrets from a local file.\nfs.readFile('credentials.json', (err, content) => {\n  if (err) return console.log('Error loading client secret file:', err);\n  // Authorize a client with credentials, then call the Google Calendar API.\n  authorize(JSON.parse(content), listEvents);\n});\n\n/**\n * Create an OAuth2 client with the given credentials, and then execute the\n * given callback function.\n * @param {Object} credentials The authorization client credentials.\n * @param {function} callback The callback to call with the authorized client.\n */\nfunction authorize(credentials, callback) {\n  const {client_secret, client_id, redirect_uris} = credentials.installed;\n  const oAuth2Client = new google.auth.OAuth2(\n      client_id, client_secret, redirect_uris[0]);\n\n  // Check if we have previously stored a token.\n  fs.readFile(TOKEN_PATH, (err, token) => {\n    if (err) return getAccessToken(oAuth2Client, callback);\n    oAuth2Client.setCredentials(JSON.parse(token));\n    callback(oAuth2Client);\n  });\n}\n\n/**\n * Get and store new token after prompting for user authorization, and then\n * execute the given callback with the authorized OAuth2 client.\n * @param {google.auth.OAuth2} oAuth2Client The OAuth2 client to get token for.\n * @param {getEventsCallback} callback The callback for the authorized client.\n */\nfunction getAccessToken(oAuth2Client, callback) {\n  const authUrl = oAuth2Client.generateAuthUrl({\n    access_type: 'offline',\n    scope: SCOPES,\n  });\n  console.log('Authorize this app by visiting this url:', authUrl);\n  const rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout,\n  });\n  rl.question('Enter the code from that page here: ', (code) => {\n    rl.close();\n    oAuth2Client.getToken(code, (err, token) => {\n      if (err) return console.error('Error retrieving access token', err);\n      oAuth2Client.setCredentials(token);\n      // Store the token to disk for later program executions\n      fs.writeFile(TOKEN_PATH, JSON.stringify(token), (err) => {\n        if (err) return console.error(err);\n        console.log('Token stored to', TOKEN_PATH);\n      });\n      callback(oAuth2Client);\n    });\n  });\n}\n\n/**\n * Lists the next 10 events on the user's primary calendar.\n * @param {google.auth.OAuth2} auth An authorized OAuth2 client.\n */\nfunction listEvents(auth) {\n  const calendar = google.calendar({version: 'v3', auth});\n  calendar.events.list({\n    calendarId: 'primary',\n    timeMin: (new Date()).toISOString(),\n    maxResults: 10,\n    singleEvents: true,\n    orderBy: 'startTime',\n  }, (err, res) => {\n    if (err) return console.log('The API returned an error: ' + err);\n    const events = res.data.items;\n    if (events.length) {\n      console.log('Upcoming 10 events:');\n      events.map((event, i) => {\n        const start = event.start.dateTime || event.start.date;\n        console.log(`${start} - ${event.summary}`);\n      });\n    } else {\n      console.log('No upcoming events found.');\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"module"}